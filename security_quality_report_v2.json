{
  "timestamp": "2025-08-25T13:23:00.041737",
  "execution_time": 2.716917037963867,
  "project_stats": {
    "total_files": 164,
    "source_files": 136,
    "test_files": 28,
    "total_lines": 69409,
    "avg_lines_per_file": 510.3602941176471,
    "large_files": 8
  },
  "security_gates": {
    "overall_passed": false,
    "security_analysis": {
      "timestamp": "2025-08-25T13:22:57.332116",
      "files_scanned": 164,
      "critical_issues": [
        {
          "file": "comprehensive_quality_gates.py",
          "line": 611,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "module = __import__(module_name, fromlist=[class_name])"
        },
        {
          "file": "comprehensive_quality_gates_v2.py",
          "line": 411,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "__import__(module_name)"
        },
        {
          "file": "comprehensive_quality_gates_v2.py",
          "line": 583,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "__import__(module)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 58,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "module = __import__(dep_name)"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 491,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "(r'eval\\s*\\(', 'Use of eval() function'),"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 492,
          "pattern": "exec\\s*\\(",
          "description": "Use of exec() is dangerous",
          "severity": "critical",
          "context": "(r'exec\\s*\\(', 'Use of exec() function'),"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 158,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "imported = __import__(module)"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 495,
          "pattern": "os\\.system\\s*\\(",
          "description": "Command injection risk",
          "severity": "critical",
          "context": "(r'os\\.system\\s*\\(', 'Use of os.system()'),"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 205,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "timestamp=__import__('datetime').datetime.now(),"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 226,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "created_time=__import__('datetime').datetime.now(),"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 227,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "updated_time=__import__('datetime').datetime.now()"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 51,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "(r\"eval\\s*\\(\", \"Use of eval() is dangerous\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 52,
          "pattern": "exec\\s*\\(",
          "description": "Use of exec() is dangerous",
          "severity": "critical",
          "context": "(r\"exec\\s*\\(\", \"Use of exec() is dangerous\"),"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 261,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "self.generator.eval()"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 41,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "def eval(self):"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 51,
          "pattern": "__import__\\s*\\(",
          "description": "Dynamic imports can be dangerous",
          "severity": "critical",
          "context": "__import__(module_name)"
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "line": 277,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "self.generator.eval()"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 262,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "self.generator.eval()"
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 336,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "self.generator.eval()"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 334,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "self.generator.eval()"
        },
        {
          "file": "gan_cyber_range/utils/optimization.py",
          "line": 114,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "model.eval()"
        },
        {
          "file": "gan_cyber_range/utils/optimization.py",
          "line": 201,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "model.eval()"
        },
        {
          "file": "gan_cyber_range/utils/performance.py",
          "line": 301,
          "pattern": "eval\\s*\\(",
          "description": "Use of eval() is dangerous",
          "severity": "critical",
          "context": "model.eval()"
        }
      ],
      "warning_issues": [
        {
          "file": "auto_scaling.py",
          "line": 537,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if random.random() < 0.1:  # 10% chance of spike"
        },
        {
          "file": "comprehensive_quality_gates.py",
          "line": 467,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "hash_value = hashlib.md5(f\"operation_{operations_completed}\".encode()).hexdigest()"
        },
        {
          "file": "high_performance_defensive_platform.py",
          "line": 893,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "cache_key = f\"training_{hashlib.md5(str(training_config).encode()).hexdigest()}\""
        },
        {
          "file": "performance_optimization.py",
          "line": 420,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "cache_key = hashlib.md5("
        },
        {
          "file": "robust_error_handling.py",
          "line": 380,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "success = random.random() > 0.3  # 70% success rate for demo"
        },
        {
          "file": "robust_error_handling.py",
          "line": 575,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if random.random() < 0.7:  # 70% failure rate for demo"
        },
        {
          "file": "robust_error_handling.py",
          "line": 309,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "error_id = hashlib.md5("
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 198,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "success = random.random() < attack.success_probability"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 202,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "detected = random.random() < detection_probability"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 503,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "attack_success = random.random() < 0.7  # 70% success rate"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 509,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "detection = random.random() < 0.6  # 60% detection rate"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 278,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "return f\"ENC:{hashlib.md5((value + self.encryption_key).encode()).hexdigest()}\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 383,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "return success and (random.random() < adjusted_probability)"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 414,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "crown_jewel = (host_type == HostType.SERVER and random.random() < 0.05)"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 450,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if random.random() < vuln_probability:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 422,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "success = random.random() < success_probability"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 426,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "detected = random.random() < detection_probability"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 540,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if random.random() > 0.3:  # 70% detection rate"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 328,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "detects_attack = np.random.random() < tool_config['detection_rate']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 330,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if detects_attack or np.random.random() < tool_config['false_positive_rate']:"
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 543,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "if attachments and random.random() < 0.6:  # 60% chance of attachment"
        },
        {
          "file": "gan_cyber_range/optimization/enhanced_performance.py",
          "line": 645,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "cache_key = hashlib.md5(key_data.encode()).hexdigest()"
        },
        {
          "file": "gan_cyber_range/optimization/query_optimizer.py",
          "line": 200,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "return hashlib.md5(query_str.encode()).hexdigest()[:16]"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 275,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "return hashlib.md5(content.encode()).hexdigest()[:16]"
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaler.py",
          "line": 763,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "return random.random() < 0.95"
        },
        {
          "file": "gan_cyber_range/security/defensive_security_monitor.py",
          "line": 453,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "return hashlib.md5(signature_string.encode()).hexdigest()"
        },
        {
          "file": "gan_cyber_range/utils/advanced_error_recovery.py",
          "line": 156,
          "pattern": "random\\.random\\s*\\(\\)",
          "description": "Use cryptographically secure random for security",
          "severity": "warning",
          "context": "actual_delay *= (0.5 + random.random() * 0.5)"
        },
        {
          "file": "gan_cyber_range/utils/caching.py",
          "line": 258,
          "pattern": "pickle\\.loads?\\s*\\(",
          "description": "Pickle deserialization can be unsafe",
          "severity": "warning",
          "context": "return pickle.loads(data)"
        },
        {
          "file": "gan_cyber_range/utils/caching.py",
          "line": 595,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "cache_key = hashlib.md5(\":\".join(key_parts).encode()).hexdigest()"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 597,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "hash_part = hashlib.md5(f\"{target}_{timestamp}\".encode()).hexdigest()[:8]"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 758,
          "pattern": "hashlib\\.md5\\s*\\(",
          "description": "MD5 is cryptographically broken",
          "severity": "warning",
          "context": "consent_key = f\"{operation}_{hashlib.md5('_'.join(participants).encode()).hexdigest()}\""
        }
      ],
      "info_issues": [
        {
          "file": "autonomous_defensive_demo.py",
          "line": 310,
          "pattern": "print\\s*\\([^)]*key",
          "description": "Potential key in print statement",
          "severity": "info",
          "context": "print(\"\\nKey Results:\")"
        },
        {
          "file": "comprehensive_quality_gates.py",
          "line": 834,
          "pattern": "print\\s*\\([^)]*key",
          "description": "Potential key in print statement",
          "severity": "info",
          "context": "print(f\"   \u2022 {key}: {detail_score:.1f}/100\")"
        },
        {
          "file": "comprehensive_quality_gates.py",
          "line": 837,
          "pattern": "print\\s*\\([^)]*key",
          "description": "Potential key in print statement",
          "severity": "info",
          "context": "print(f\"   \u2022 {key}: {detail_text}...\")"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 503,
          "pattern": "TODO.*security",
          "description": "Security TODO found",
          "severity": "info",
          "context": "(r'TODO.*security', 'Security-related TODO found'),"
        },
        {
          "file": "lightweight_quality_gates.py",
          "line": 504,
          "pattern": "FIXME.*security",
          "description": "Security FIXME found",
          "severity": "info",
          "context": "(r'FIXME.*security', 'Security-related FIXME found'),"
        },
        {
          "file": "quick_start.py",
          "line": 99,
          "pattern": "print\\s*\\([^)]*key",
          "description": "Potential key in print statement",
          "severity": "info",
          "context": "print(f\"  {key}: {value}\")"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 69,
          "pattern": "TODO.*security",
          "description": "Security TODO found",
          "severity": "info",
          "context": "(r\"TODO.*security\", \"Security TODO found\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 70,
          "pattern": "FIXME.*security",
          "description": "Security FIXME found",
          "severity": "info",
          "context": "(r\"FIXME.*security\", \"Security FIXME found\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 71,
          "pattern": "XXX.*security",
          "description": "Security XXX found",
          "severity": "info",
          "context": "(r\"XXX.*security\", \"Security XXX found\"),"
        }
      ],
      "security_score": 0,
      "summary": {
        "total_issues": 63,
        "critical_issues": 23,
        "warning_issues": 31,
        "info_issues": 9,
        "pass_threshold": 80,
        "passed": false
      }
    },
    "defensive_usage": {
      "timestamp": "2025-08-25T13:22:57.970809",
      "files_analyzed": 164,
      "defensive_indicators": [
        {
          "file": "auto_scaling.py",
          "defensive_count": 77,
          "concern_count": 0
        },
        {
          "file": "autonomous_defensive_demo.py",
          "defensive_count": 119,
          "concern_count": 0
        },
        {
          "file": "basic_test_runner.py",
          "defensive_count": 183,
          "concern_count": 0
        },
        {
          "file": "comprehensive_quality_gates.py",
          "defensive_count": 139,
          "concern_count": 0
        },
        {
          "file": "comprehensive_quality_gates_v2.py",
          "defensive_count": 77,
          "concern_count": 0
        },
        {
          "file": "conftest.py",
          "defensive_count": 137,
          "concern_count": 10
        },
        {
          "file": "defensive_demo.py",
          "defensive_count": 148,
          "concern_count": 1
        },
        {
          "file": "defensive_monitoring.py",
          "defensive_count": 158,
          "concern_count": 0
        },
        {
          "file": "deployment_guide.py",
          "defensive_count": 47,
          "concern_count": 0
        },
        {
          "file": "enhanced_defensive_training.py",
          "defensive_count": 303,
          "concern_count": 0
        },
        {
          "file": "enhanced_demo.py",
          "defensive_count": 64,
          "concern_count": 116
        },
        {
          "file": "final_demo.py",
          "defensive_count": 20,
          "concern_count": 106
        },
        {
          "file": "fix_formatting.py",
          "defensive_count": 1,
          "concern_count": 0
        },
        {
          "file": "health_check.py",
          "defensive_count": 28,
          "concern_count": 0
        },
        {
          "file": "high_performance_defensive_platform.py",
          "defensive_count": 92,
          "concern_count": 0
        },
        {
          "file": "install_dependencies.py",
          "defensive_count": 28,
          "concern_count": 0
        },
        {
          "file": "lightweight_monitoring.py",
          "defensive_count": 177,
          "concern_count": 0
        },
        {
          "file": "lightweight_quality_gates.py",
          "defensive_count": 86,
          "concern_count": 0
        },
        {
          "file": "performance_benchmark.py",
          "defensive_count": 33,
          "concern_count": 58
        },
        {
          "file": "performance_optimization.py",
          "defensive_count": 33,
          "concern_count": 0
        },
        {
          "file": "production_deployment.py",
          "defensive_count": 110,
          "concern_count": 15
        },
        {
          "file": "production_deployment_guide.py",
          "defensive_count": 89,
          "concern_count": 0
        },
        {
          "file": "production_deployment_manager.py",
          "defensive_count": 120,
          "concern_count": 0
        },
        {
          "file": "production_deployment_orchestrator.py",
          "defensive_count": 187,
          "concern_count": 0
        },
        {
          "file": "quality_gates.py",
          "defensive_count": 115,
          "concern_count": 151
        },
        {
          "file": "robust_defensive_framework.py",
          "defensive_count": 154,
          "concern_count": 0
        },
        {
          "file": "robust_error_handling.py",
          "defensive_count": 39,
          "concern_count": 0
        },
        {
          "file": "run_comprehensive_tests.py",
          "defensive_count": 158,
          "concern_count": 0
        },
        {
          "file": "security_quality_gates.py",
          "defensive_count": 8,
          "concern_count": 0
        },
        {
          "file": "security_scanner.py",
          "defensive_count": 9,
          "concern_count": 0
        },
        {
          "file": "setup.py",
          "defensive_count": 3,
          "concern_count": 1
        },
        {
          "file": "simple_demo.py",
          "defensive_count": 17,
          "concern_count": 16
        },
        {
          "file": "simple_performance_test.py",
          "defensive_count": 62,
          "concern_count": 68
        },
        {
          "file": "simple_test_runner.py",
          "defensive_count": 73,
          "concern_count": 0
        },
        {
          "file": "standalone_test.py",
          "defensive_count": 81,
          "concern_count": 63
        },
        {
          "file": "test_basic_functionality.py",
          "defensive_count": 175,
          "concern_count": 39
        },
        {
          "file": "test_basic_integration.py",
          "defensive_count": 97,
          "concern_count": 28
        },
        {
          "file": "test_runner.py",
          "defensive_count": 98,
          "concern_count": 73
        },
        {
          "file": "test_runner_minimal.py",
          "defensive_count": 82,
          "concern_count": 0
        },
        {
          "file": "test_runner_simple.py",
          "defensive_count": 95,
          "concern_count": 0
        },
        {
          "file": "test_security_only.py",
          "defensive_count": 93,
          "concern_count": 1
        },
        {
          "file": "test_structure_validation.py",
          "defensive_count": 47,
          "concern_count": 7
        },
        {
          "file": "comprehensive_test_suite.py",
          "defensive_count": 255,
          "concern_count": 73
        },
        {
          "file": "quick_start.py",
          "defensive_count": 22,
          "concern_count": 4
        },
        {
          "file": "robust_demo.py",
          "defensive_count": 170,
          "concern_count": 28
        },
        {
          "file": "optimized_demo.py",
          "defensive_count": 118,
          "concern_count": 40
        },
        {
          "file": "security_quality_gates_v2.py",
          "defensive_count": 126,
          "concern_count": 10
        },
        {
          "file": "examples/advanced_research_example.py",
          "defensive_count": 25,
          "concern_count": 23
        },
        {
          "file": "examples/basic_usage_example.py",
          "defensive_count": 20,
          "concern_count": 37
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "defensive_count": 23,
          "concern_count": 16
        },
        {
          "file": "gan_cyber_range/demo.py",
          "defensive_count": 16,
          "concern_count": 182
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "defensive_count": 9,
          "concern_count": 7
        },
        {
          "file": "tests/__init__.py",
          "defensive_count": 1,
          "concern_count": 0
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "defensive_count": 174,
          "concern_count": 25
        },
        {
          "file": "tests/test_api.py",
          "defensive_count": 151,
          "concern_count": 27
        },
        {
          "file": "tests/test_attack_gan.py",
          "defensive_count": 126,
          "concern_count": 219
        },
        {
          "file": "tests/test_cyber_range.py",
          "defensive_count": 323,
          "concern_count": 30
        },
        {
          "file": "tests/test_demo_system.py",
          "defensive_count": 223,
          "concern_count": 126
        },
        {
          "file": "tests/test_factories.py",
          "defensive_count": 227,
          "concern_count": 39
        },
        {
          "file": "tests/test_integration.py",
          "defensive_count": 154,
          "concern_count": 54
        },
        {
          "file": "tests/test_orchestration.py",
          "defensive_count": 256,
          "concern_count": 13
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "defensive_count": 204,
          "concern_count": 41
        },
        {
          "file": "tests/test_research_framework.py",
          "defensive_count": 169,
          "concern_count": 0
        },
        {
          "file": "tests/test_security.py",
          "defensive_count": 197,
          "concern_count": 33
        },
        {
          "file": "tests/test_security_framework.py",
          "defensive_count": 143,
          "concern_count": 0
        },
        {
          "file": "tests/test_utils.py",
          "defensive_count": 288,
          "concern_count": 27
        },
        {
          "file": "gan_cyber_range/api/auth.py",
          "defensive_count": 2,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "defensive_count": 22,
          "concern_count": 45
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "defensive_count": 19,
          "concern_count": 57
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "defensive_count": 26,
          "concern_count": 29
        },
        {
          "file": "gan_cyber_range/blue_team/__init__.py",
          "defensive_count": 12,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "defensive_count": 78,
          "concern_count": 49
        },
        {
          "file": "gan_cyber_range/blue_team/forensics.py",
          "defensive_count": 2,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/blue_team/incident_response.py",
          "defensive_count": 9,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/blue_team/threat_hunting.py",
          "defensive_count": 3,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/cli/__init__.py",
          "defensive_count": 1,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "defensive_count": 60,
          "concern_count": 64
        },
        {
          "file": "gan_cyber_range/compliance/__init__.py",
          "defensive_count": 1,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/compliance/global_compliance_manager.py",
          "defensive_count": 37,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "defensive_count": 62,
          "concern_count": 16
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "defensive_count": 1,
          "concern_count": 12
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "defensive_count": 27,
          "concern_count": 187
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "defensive_count": 27,
          "concern_count": 127
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "defensive_count": 53,
          "concern_count": 21
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "defensive_count": 23,
          "concern_count": 142
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "defensive_count": 51,
          "concern_count": 23
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "defensive_count": 28,
          "concern_count": 6
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "defensive_count": 52,
          "concern_count": 219
        },
        {
          "file": "gan_cyber_range/db/__init__.py",
          "defensive_count": 2,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/db/database.py",
          "defensive_count": 15,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "defensive_count": 38,
          "concern_count": 41
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "defensive_count": 78,
          "concern_count": 83
        },
        {
          "file": "gan_cyber_range/education/__init__.py",
          "defensive_count": 15,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "defensive_count": 275,
          "concern_count": 15
        },
        {
          "file": "gan_cyber_range/evaluation/__init__.py",
          "defensive_count": 9,
          "concern_count": 4
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "defensive_count": 7,
          "concern_count": 234
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "defensive_count": 79,
          "concern_count": 63
        },
        {
          "file": "gan_cyber_range/evaluation/training_evaluator.py",
          "defensive_count": 49,
          "concern_count": 1
        },
        {
          "file": "gan_cyber_range/factories/__init__.py",
          "defensive_count": 3,
          "concern_count": 3
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "defensive_count": 41,
          "concern_count": 60
        },
        {
          "file": "gan_cyber_range/factories/network_factory.py",
          "defensive_count": 45,
          "concern_count": 4
        },
        {
          "file": "gan_cyber_range/factories/range_factory.py",
          "defensive_count": 36,
          "concern_count": 3
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "defensive_count": 164,
          "concern_count": 9
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "defensive_count": 18,
          "concern_count": 4
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "defensive_count": 9,
          "concern_count": 73
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "defensive_count": 8,
          "concern_count": 4
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "defensive_count": 18,
          "concern_count": 92
        },
        {
          "file": "gan_cyber_range/internationalization/localization_manager.py",
          "defensive_count": 2,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/monitoring/__init__.py",
          "defensive_count": 10,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/monitoring/metrics_collector.py",
          "defensive_count": 8,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/__init__.py",
          "defensive_count": 12,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/advanced_performance.py",
          "defensive_count": 5,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/cache_optimizer.py",
          "defensive_count": 19,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/enhanced_performance.py",
          "defensive_count": 78,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/high_performance_computing.py",
          "defensive_count": 18,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/performance_monitor.py",
          "defensive_count": 54,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/query_optimizer.py",
          "defensive_count": 76,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/resource_pool.py",
          "defensive_count": 2,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "defensive_count": 79,
          "concern_count": 22
        },
        {
          "file": "gan_cyber_range/orchestration/__init__.py",
          "defensive_count": 3,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "defensive_count": 53,
          "concern_count": 8
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "defensive_count": 78,
          "concern_count": 22
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "defensive_count": 45,
          "concern_count": 10
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "defensive_count": 37,
          "concern_count": 54
        },
        {
          "file": "gan_cyber_range/research/__init__.py",
          "defensive_count": 3,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/research/baseline_comparator.py",
          "defensive_count": 24,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "defensive_count": 45,
          "concern_count": 10
        },
        {
          "file": "gan_cyber_range/research/statistical_validator.py",
          "defensive_count": 130,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaler.py",
          "defensive_count": 65,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaling_framework.py",
          "defensive_count": 16,
          "concern_count": 4
        },
        {
          "file": "gan_cyber_range/scalability/intelligent_scaling.py",
          "defensive_count": 76,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/security/__init__.py",
          "defensive_count": 3,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/security/audit_logger.py",
          "defensive_count": 4,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/security/comprehensive_security.py",
          "defensive_count": 49,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/security/defensive_security_monitor.py",
          "defensive_count": 228,
          "concern_count": 2
        },
        {
          "file": "gan_cyber_range/security/security_orchestrator.py",
          "defensive_count": 42,
          "concern_count": 3
        },
        {
          "file": "gan_cyber_range/testing/comprehensive_test_framework.py",
          "defensive_count": 259,
          "concern_count": 1
        },
        {
          "file": "gan_cyber_range/training/__init__.py",
          "defensive_count": 24,
          "concern_count": 1
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "defensive_count": 181,
          "concern_count": 25
        },
        {
          "file": "gan_cyber_range/utils/__init__.py",
          "defensive_count": 37,
          "concern_count": 3
        },
        {
          "file": "gan_cyber_range/utils/advanced_error_recovery.py",
          "defensive_count": 74,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/auto_scaling.py",
          "defensive_count": 9,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/caching.py",
          "defensive_count": 4,
          "concern_count": 2
        },
        {
          "file": "gan_cyber_range/utils/comprehensive_monitoring.py",
          "defensive_count": 43,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "defensive_count": 96,
          "concern_count": 16
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "defensive_count": 30,
          "concern_count": 24
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "defensive_count": 91,
          "concern_count": 20
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "defensive_count": 114,
          "concern_count": 9
        },
        {
          "file": "gan_cyber_range/utils/optimization.py",
          "defensive_count": 17,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/performance.py",
          "defensive_count": 53,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/scaling.py",
          "defensive_count": 10,
          "concern_count": 0
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "defensive_count": 150,
          "concern_count": 32
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "defensive_count": 64,
          "concern_count": 19
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "defensive_count": 192,
          "concern_count": 15
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "defensive_count": 116,
          "concern_count": 37
        }
      ],
      "potential_concerns": [
        {
          "file": "conftest.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def sample_attack_data():"
        },
        {
          "file": "conftest.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"sample attack data for testing\"\"\""
        },
        {
          "file": "conftest.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"denial of service amplification reflection attack\","
        },
        {
          "file": "conftest.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import generator, discriminator"
        },
        {
          "file": "conftest.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def attack_config_sample():"
        },
        {
          "file": "conftest.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"sample attack configuration for testing\"\"\""
        },
        {
          "file": "conftest.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phase': 'exploitation',"
        },
        {
          "file": "conftest.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_types': ['web', 'malware', 'network'],"
        },
        {
          "file": "conftest.py",
          "line": 240,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "metric(\"attacks_total\", 15, metrictype.counter, datetime.now(), {\"type\": \"web\"}),"
        },
        {
          "file": "conftest.py",
          "line": 49,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "\"malware trojan backdoor persistence registry\","
        },
        {
          "file": "defensive_demo.py",
          "line": 192,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"threat hunting exercise\", [\"identify indicators\", \"track attacker\", \"prevent damage\"]),"
        },
        {
          "file": "enhanced_demo.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector, minimalattackgenerator, mockcyberrange"
        },
        {
          "file": "enhanced_demo.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector, minimalattackgenerator, mockcyberrange"
        },
        {
          "file": "enhanced_demo.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "enhanced_demo.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "enhanced_demo.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test\","
        },
        {
          "file": "enhanced_demo.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 attackvector creation successful\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = minimalattackgenerator()"
        },
        {
          "file": "enhanced_demo.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 minimalattackgenerator creation successful\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "enhanced_demo.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "enhanced_demo.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 full attackgan imported successfully (pytorch available)\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u26a0 full attackgan import failed despite pytorch: {e}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u26a0 full attackgan skipped (pytorch not available - using minimal version)\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation():"
        },
        {
          "file": "enhanced_demo.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation with error handling\"\"\""
        },
        {
          "file": "enhanced_demo.py",
          "line": 140,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\ntesting attack generation\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import minimalattackgenerator, attackvector"
        },
        {
          "file": "enhanced_demo.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import minimalattackgenerator, attackvector"
        },
        {
          "file": "enhanced_demo.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = minimalattackgenerator()"
        },
        {
          "file": "enhanced_demo.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 attack generator initialized\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"generating 10 diverse attacks...\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=10)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attacks:"
        },
        {
          "file": "enhanced_demo.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2717 no attacks generated\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# display sample attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\nsample generated attacks:\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks[:3], 1):"
        },
        {
          "file": "enhanced_demo.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks[:3], 1):"
        },
        {
          "file": "enhanced_demo.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  attack {i}:\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    type: {attack.attack_type}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    type: {attack.attack_type}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 165,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    payload: {attack.payload[:50]}...\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    techniques: {attack.techniques}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 167,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    severity: {attack.severity:.2f}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 168,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"    stealth: {attack.stealth_level:.2f}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 171,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 attack diversity score: {diversity:.3f}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test different attack types"
        },
        {
          "file": "enhanced_demo.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in [\"malware\", \"network\", \"web\", \"social_engineering\"]:"
        },
        {
          "file": "enhanced_demo.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 177,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if type_attacks:"
        },
        {
          "file": "enhanced_demo.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 failed to generate {attack_type} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 failed to generate {attack_type} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 attack generation test failed: {e}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import mockcyberrange, minimalattackgenerator"
        },
        {
          "file": "enhanced_demo.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate and execute attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 212,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(attacks)} attacks for execution\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 212,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generated {len(attacks)} attacks for execution\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "enhanced_demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "enhanced_demo.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack {attack.attack_id[:8]}: {status}, {detected}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack {attack.attack_id[:8]}: {status}, {detected}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack {attack.attack_id[:8]}: {status}, {detected}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attacks executed: {metrics['attacks_executed']}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attacks executed: {metrics['attacks_executed']}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test saving and loading attack data\"\"\""
        },
        {
          "file": "enhanced_demo.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import minimalattackgenerator"
        },
        {
          "file": "enhanced_demo.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = minimalattackgenerator()"
        },
        {
          "file": "enhanced_demo.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 251,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# save attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "save_path = path(\"/tmp/test_attacks.json\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, save_path)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, save_path)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 saved attacks to {save_path}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# load attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(save_path)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(save_path)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 loaded {len(loaded_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 loaded {len(loaded_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) == len(attacks):"
        },
        {
          "file": "enhanced_demo.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) == len(attacks):"
        },
        {
          "file": "enhanced_demo.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 data integrity check failed: {len(loaded_attacks)} != {len(attacks)}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 data integrity check failed: {len(loaded_attacks)} != {len(attacks)}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 287,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import attackvector, minimalattackgenerator"
        },
        {
          "file": "enhanced_demo.py",
          "line": 287,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.minimal_gan import attackvector, minimalattackgenerator"
        },
        {
          "file": "enhanced_demo.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test invalid attack vector creation"
        },
        {
          "file": "enhanced_demo.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "enhanced_demo.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "enhanced_demo.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"\",  # empty type"
        },
        {
          "file": "enhanced_demo.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 invalid attack vector handled gracefully\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u26a0 attack vector validation: {e}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 305,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = minimalattackgenerator()"
        },
        {
          "file": "enhanced_demo.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# zero attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "zero_attacks = generator.generate(num_samples=0)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 zero sample request handled: {len(zero_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 zero sample request handled: {len(zero_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 311,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# large number of attacks"
        },
        {
          "file": "enhanced_demo.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "many_attacks = generator.generate(num_samples=100)"
        },
        {
          "file": "enhanced_demo.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 large sample request handled: {len(many_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 large sample request handled: {len(many_attacks)} attacks\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 315,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# invalid attack type"
        },
        {
          "file": "enhanced_demo.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_type_attacks = generator.generate(num_samples=2, attack_type=\"invalid_type\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_type_attacks = generator.generate(num_samples=2, attack_type=\"invalid_type\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 invalid attack type handled: {len(invalid_type_attacks)} attacks generated\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 invalid attack type handled: {len(invalid_type_attacks)} attacks generated\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 invalid attack type handled: {len(invalid_type_attacks)} attacks generated\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 320,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "single_attack_diversity = generator.diversity_score([many_attacks[0]])"
        },
        {
          "file": "enhanced_demo.py",
          "line": 320,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "single_attack_diversity = generator.diversity_score([many_attacks[0]])"
        },
        {
          "file": "enhanced_demo.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 single attack diversity: {single_attack_diversity}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 single attack diversity: {single_attack_diversity}\")"
        },
        {
          "file": "enhanced_demo.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack_generation,"
        },
        {
          "file": "final_demo.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ultraminimalgenerator, ultraminimalcyberrange, attackvector"
        },
        {
          "file": "final_demo.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# === attack generation testing ==="
        },
        {
          "file": "final_demo.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\ud83c\udfaf attack generation\")"
        },
        {
          "file": "final_demo.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generator initialized with attack types: {generator.attack_types}\")"
        },
        {
          "file": "final_demo.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 generator initialized with attack types: {generator.attack_types}\")"
        },
        {
          "file": "final_demo.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate diverse attacks"
        },
        {
          "file": "final_demo.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\ngenerating 20 diverse attacks...\")"
        },
        {
          "file": "final_demo.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=20)"
        },
        {
          "file": "final_demo.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 generated {len(attacks)} attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 generated {len(attacks)} attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# show sample attacks"
        },
        {
          "file": "final_demo.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n\ud83d\udccb sample generated attacks:\")"
        },
        {
          "file": "final_demo.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks[:5], 1):"
        },
        {
          "file": "final_demo.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks[:5], 1):"
        },
        {
          "file": "final_demo.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {i}. {attack.attack_type.upper()}\")"
        },
        {
          "file": "final_demo.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {i}. {attack.attack_type.upper()}\")"
        },
        {
          "file": "final_demo.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     payload: {attack.payload}\")"
        },
        {
          "file": "final_demo.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     techniques: {', '.join(attack.techniques)}\")"
        },
        {
          "file": "final_demo.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     severity: {attack.severity:.2f}, stealth: {attack.stealth_level:.2f}\")"
        },
        {
          "file": "final_demo.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     severity: {attack.severity:.2f}, stealth: {attack.stealth_level:.2f}\")"
        },
        {
          "file": "final_demo.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     targets: {', '.join(attack.target_systems)}\")"
        },
        {
          "file": "final_demo.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack type specific generation"
        },
        {
          "file": "final_demo.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\ud83d\udd0d testing attack type specific generation:\")"
        },
        {
          "file": "final_demo.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "final_demo.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "final_demo.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=3, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=3, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=3, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  \u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  \u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  \u2713 generated {len(type_attacks)} {attack_type} attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "final_demo.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\\n\ud83d\udcca attack diversity score: {diversity:.3f}\")"
        },
        {
          "file": "final_demo.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks for execution"
        },
        {
          "file": "final_demo.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "execution_attacks = cyber_range.generate_attacks(num_attacks=15)"
        },
        {
          "file": "final_demo.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "execution_attacks = cyber_range.generate_attacks(num_attacks=15)"
        },
        {
          "file": "final_demo.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "execution_attacks = cyber_range.generate_attacks(num_attacks=15)"
        },
        {
          "file": "final_demo.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\\n\ud83c\udfaf generated {len(execution_attacks)} attacks for execution\")"
        },
        {
          "file": "final_demo.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\\n\ud83c\udfaf generated {len(execution_attacks)} attacks for execution\")"
        },
        {
          "file": "final_demo.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute attacks and track results"
        },
        {
          "file": "final_demo.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n\u26a1 executing attacks:\")"
        },
        {
          "file": "final_demo.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(execution_attacks, 1):"
        },
        {
          "file": "final_demo.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(execution_attacks, 1):"
        },
        {
          "file": "final_demo.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "final_demo.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "final_demo.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {i:2d}. {attack.attack_type:15} | {status:7} | {detection:10} | {time_taken:5.2f}s\")"
        },
        {
          "file": "final_demo.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {i:2d}. {attack.attack_type:15} | {status:7} | {detection:10} | {time_taken:5.2f}s\")"
        },
        {
          "file": "final_demo.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"total attacks executed: {metrics['attacks_executed']}\")"
        },
        {
          "file": "final_demo.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"total attacks executed: {metrics['attacks_executed']}\")"
        },
        {
          "file": "final_demo.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# get attack summary"
        },
        {
          "file": "final_demo.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary = cyber_range.get_attack_summary()"
        },
        {
          "file": "final_demo.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\\n\ud83c\udfaf attack summary\")"
        },
        {
          "file": "final_demo.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"total attacks: {summary['total_attacks']}\")"
        },
        {
          "file": "final_demo.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"total attacks: {summary['total_attacks']}\")"
        },
        {
          "file": "final_demo.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"by attack type:\")"
        },
        {
          "file": "final_demo.py",
          "line": 128,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type, count in summary['by_type'].items():"
        },
        {
          "file": "final_demo.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {attack_type}: {count}\")"
        },
        {
          "file": "final_demo.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# save attack data"
        },
        {
          "file": "final_demo.py",
          "line": 146,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "save_path = path(\"/tmp/cyber_range_attacks.json\")"
        },
        {
          "file": "final_demo.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, save_path)"
        },
        {
          "file": "final_demo.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, save_path)"
        },
        {
          "file": "final_demo.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 saved {len(attacks)} attacks to {save_path}\")"
        },
        {
          "file": "final_demo.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 saved {len(attacks)} attacks to {save_path}\")"
        },
        {
          "file": "final_demo.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(save_path)"
        },
        {
          "file": "final_demo.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(save_path)"
        },
        {
          "file": "final_demo.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 loaded {len(loaded_attacks)} attacks from file\")"
        },
        {
          "file": "final_demo.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2705 loaded {len(loaded_attacks)} attacks from file\")"
        },
        {
          "file": "final_demo.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) == len(attacks):"
        },
        {
          "file": "final_demo.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) == len(attacks):"
        },
        {
          "file": "final_demo.py",
          "line": 170,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# scenario 1: high stealth attack campaign"
        },
        {
          "file": "final_demo.py",
          "line": 171,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"scenario 1: high-stealth attack campaign\")"
        },
        {
          "file": "final_demo.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_attacks = []"
        },
        {
          "file": "final_demo.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_batch = generator.generate(num_samples=1)"
        },
        {
          "file": "final_demo.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_batch and attack_batch[0].stealth_level > 0.7:"
        },
        {
          "file": "final_demo.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_batch and attack_batch[0].stealth_level > 0.7:"
        },
        {
          "file": "final_demo.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_attacks.extend(attack_batch)"
        },
        {
          "file": "final_demo.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_attacks.extend(attack_batch)"
        },
        {
          "file": "final_demo.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  generated {len(stealth_attacks)} high-stealth attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  generated {len(stealth_attacks)} high-stealth attacks\")"
        },
        {
          "file": "final_demo.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# scenario 2: multi-vector coordinated attack"
        },
        {
          "file": "final_demo.py",
          "line": 181,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\nscenario 2: multi-vector coordinated attack\")"
        },
        {
          "file": "final_demo.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "coordinated_attacks = []"
        },
        {
          "file": "final_demo.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "final_demo.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "final_demo.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "final_demo.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "coordinated_attacks.extend(type_attacks)"
        },
        {
          "file": "final_demo.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "coordinated_attacks.extend(type_attacks)"
        },
        {
          "file": "final_demo.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  generated {len(coordinated_attacks)} coordinated attacks across all vectors\")"
        },
        {
          "file": "final_demo.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  generated {len(coordinated_attacks)} coordinated attacks across all vectors\")"
        },
        {
          "file": "final_demo.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute coordinated attacks"
        },
        {
          "file": "final_demo.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"  executing coordinated attack sequence...\")"
        },
        {
          "file": "final_demo.py",
          "line": 192,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in coordinated_attacks:"
        },
        {
          "file": "final_demo.py",
          "line": 192,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in coordinated_attacks:"
        },
        {
          "file": "final_demo.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "final_demo.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "final_demo.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks = sum(1 for r in coordinated_results if r['success'])"
        },
        {
          "file": "final_demo.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  coordinated attack results: {successful_attacks}/{len(coordinated_attacks)} successful\")"
        },
        {
          "file": "final_demo.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  coordinated attack results: {successful_attacks}/{len(coordinated_attacks)} successful\")"
        },
        {
          "file": "final_demo.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  coordinated attack results: {successful_attacks}/{len(coordinated_attacks)} successful\")"
        },
        {
          "file": "final_demo.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"  generating large attack dataset...\")"
        },
        {
          "file": "final_demo.py",
          "line": 202,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stress_attacks = generator.generate(num_samples=100)"
        },
        {
          "file": "final_demo.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stress_diversity = generator.diversity_score(stress_attacks)"
        },
        {
          "file": "final_demo.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  \u2705 generated 100 attacks with {stress_diversity:.3f} diversity\")"
        },
        {
          "file": "final_demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2705 comprehensive attack generation - working\")"
        },
        {
          "file": "performance_benchmark.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- attack generation performance"
        },
        {
          "file": "performance_benchmark.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from demo import lightweightattackgenerator, simplecyberrange, demoapi"
        },
        {
          "file": "performance_benchmark.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation speed\", self.benchmark_attack_generation),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation speed\", self.benchmark_attack_generation),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation scale\", self.benchmark_attack_scale),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation scale\", self.benchmark_attack_scale),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def benchmark_attack_generation(self) -> benchmarkresult:"
        },
        {
          "file": "performance_benchmark.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"benchmark attack generation speed\"\"\""
        },
        {
          "file": "performance_benchmark.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 98,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(1000)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 105,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ops_per_sec = len(attacks) / duration"
        },
        {
          "file": "performance_benchmark.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# validate attack quality"
        },
        {
          "file": "performance_benchmark.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "performance_benchmark.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "performance_benchmark.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "performance_benchmark.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_name=\"attack generation speed\","
        },
        {
          "file": "performance_benchmark.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": len(attack_types),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": len(attack_types),"
        },
        {
          "file": "performance_benchmark.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"diversity_ratio\": unique_payloads / len(attacks)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def benchmark_attack_scale(self) -> benchmarkresult:"
        },
        {
          "file": "performance_benchmark.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"benchmark attack generation scalability\"\"\""
        },
        {
          "file": "performance_benchmark.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 134,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(batch_size)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ops_per_sec = len(attacks) / duration"
        },
        {
          "file": "performance_benchmark.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_name=\"attack generation scale\","
        },
        {
          "file": "performance_benchmark.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute attacks"
        },
        {
          "file": "performance_benchmark.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 177,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 177,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "performance_benchmark.py",
          "line": 232,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=5)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(100)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 282,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_response['range_id'], count=10)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "performance_benchmark.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=10)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 364,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(count):"
        },
        {
          "file": "performance_benchmark.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "futures = [executor.submit(generate_attacks, 50) for _ in range(thread_count)]"
        },
        {
          "file": "performance_benchmark.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(len(result) for result in thread_results)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "threads_ops_per_sec = total_attacks / threads_duration"
        },
        {
          "file": "performance_benchmark.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks_process(count):"
        },
        {
          "file": "performance_benchmark.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from demo import lightweightattackgenerator"
        },
        {
          "file": "performance_benchmark.py",
          "line": 419,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 434,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "futures = [executor.submit(generate_attacks_process, 25) for _ in range(process_count)]"
        },
        {
          "file": "performance_benchmark.py",
          "line": 438,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(len(result) for result in proc_results)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "proc_ops_per_sec = total_attacks / proc_duration"
        },
        {
          "file": "performance_benchmark.py",
          "line": 466,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "performance_benchmark.py",
          "line": 487,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate many attacks"
        },
        {
          "file": "performance_benchmark.py",
          "line": 490,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=20)"
        },
        {
          "file": "performance_benchmark.py",
          "line": 498,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(1000)"
        },
        {
          "file": "production_deployment.py",
          "line": 225,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "production_deployment.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 5:"
        },
        {
          "file": "production_deployment.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"core attack generation not working\")"
        },
        {
          "file": "production_deployment.py",
          "line": 875,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=3)"
        },
        {
          "file": "production_deployment.py",
          "line": 877,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 3:"
        },
        {
          "file": "production_deployment.py",
          "line": 1006,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"attack generation\","
        },
        {
          "file": "production_deployment.py",
          "line": 1006,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"attack generation\","
        },
        {
          "file": "production_deployment.py",
          "line": 1020,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"generaci\u00f3n de ataques\","
        },
        {
          "file": "production_deployment.py",
          "line": 1030,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"g\u00e9n\u00e9ration d'attaques\","
        },
        {
          "file": "production_deployment.py",
          "line": 1040,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"angriffsgenerierung\","
        },
        {
          "file": "production_deployment.py",
          "line": 1050,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"\u653b\u6483\u751f\u6210\","
        },
        {
          "file": "production_deployment.py",
          "line": 1060,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_generation\": \"\u653b\u51fb\u751f\u6210\","
        },
        {
          "file": "production_deployment.py",
          "line": 1348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=1)"
        },
        {
          "file": "production_deployment.py",
          "line": 1350,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 1:"
        },
        {
          "file": "production_deployment.py",
          "line": 1351,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return false, \"attack generation failed\""
        },
        {
          "file": "quality_gates.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ultraminimalgenerator, ultraminimalcyberrange, attackvector"
        },
        {
          "file": "quality_gates.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=10)"
        },
        {
          "file": "quality_gates.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 10:"
        },
        {
          "file": "quality_gates.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"expected 10 attacks, got {len(attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"expected 10 attacks, got {len(attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 168,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "quality_gates.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = attacks[0] if attacks else attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = attacks[0] if attacks else attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = attacks[0] if attacks else attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = attacks[0] if attacks else attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 170,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test\", payload=\"test\", techniques=[\"t1001\"],"
        },
        {
          "file": "quality_gates.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(test_attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(test_attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not result or \"attack_id\" not in result:"
        },
        {
          "file": "quality_gates.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"attack execution failed\")"
        },
        {
          "file": "quality_gates.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "quality_gates.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.ultra_minimal import attackvector"
        },
        {
          "file": "quality_gates.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"\","
        },
        {
          "file": "quality_gates.py",
          "line": 261,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check attack generation safety"
        },
        {
          "file": "quality_gates.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "quality_gates.py",
          "line": 268,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# ensure attacks are for training purposes only"
        },
        {
          "file": "quality_gates.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload_str = str(attack.payload).lower()"
        },
        {
          "file": "quality_gates.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack generation safety check failed: {e}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 296,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# benchmark 1: attack generation speed"
        },
        {
          "file": "quality_gates.py",
          "line": 299,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=100)"
        },
        {
          "file": "quality_gates.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "benchmarks[\"attack_generation_100\"] = {"
        },
        {
          "file": "quality_gates.py",
          "line": 305,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"target\": \">50 attacks/second\""
        },
        {
          "file": "quality_gates.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if generation_time > 2.0:  # should generate 100 attacks in under 2 seconds"
        },
        {
          "file": "quality_gates.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack generation too slow: {generation_time:.2f}s for 100 attacks\")"
        },
        {
          "file": "quality_gates.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack generation too slow: {generation_time:.2f}s for 100 attacks\")"
        },
        {
          "file": "quality_gates.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "quality_gates.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# benchmark 4: attack execution speed"
        },
        {
          "file": "quality_gates.py",
          "line": 343,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attacks = attacks[:10]"
        },
        {
          "file": "quality_gates.py",
          "line": 343,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attacks = attacks[:10]"
        },
        {
          "file": "quality_gates.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in test_attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in test_attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "benchmarks[\"attack_execution_10\"] = {"
        },
        {
          "file": "quality_gates.py",
          "line": 352,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"target\": \">5 attacks/second\""
        },
        {
          "file": "quality_gates.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if execution_time > 2.0:  # should execute 10 attacks in under 2 seconds"
        },
        {
          "file": "quality_gates.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack execution too slow: {execution_time:.2f}s for 10 attacks\")"
        },
        {
          "file": "quality_gates.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack execution too slow: {execution_time:.2f}s for 10 attacks\")"
        },
        {
          "file": "quality_gates.py",
          "line": 396,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.ultra_minimal import ultraminimalgenerator, ultraminimalcyberrange, attack"
        },
        {
          "file": "quality_gates.py",
          "line": 401,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# zero attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "zero_attacks = generator.generate(num_samples=0)"
        },
        {
          "file": "quality_gates.py",
          "line": 403,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(zero_attacks) != 0:"
        },
        {
          "file": "quality_gates.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# negative attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "neg_attacks = generator.generate(num_samples=-5)"
        },
        {
          "file": "quality_gates.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(neg_attacks) != 0:"
        },
        {
          "file": "quality_gates.py",
          "line": 413,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# invalid attack type"
        },
        {
          "file": "quality_gates.py",
          "line": 414,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attacks = generator.generate(num_samples=2, attack_type=\"nonexistent_type\")"
        },
        {
          "file": "quality_gates.py",
          "line": 414,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attacks = generator.generate(num_samples=2, attack_type=\"nonexistent_type\")"
        },
        {
          "file": "quality_gates.py",
          "line": 415,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(invalid_attacks) != 2:  # should still generate attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 415,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(invalid_attacks) != 2:  # should still generate attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"invalid attack type not handled gracefully\")"
        },
        {
          "file": "quality_gates.py",
          "line": 420,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "single_attack = generator.generate(num_samples=1)"
        },
        {
          "file": "quality_gates.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity_single = generator.diversity_score(single_attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 423,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"single attack diversity should be 0.0, got {diversity_single}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 454,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test 4: attack vector validation"
        },
        {
          "file": "quality_gates.py",
          "line": 457,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 457,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "quality_gates.py",
          "line": 458,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test\","
        },
        {
          "file": "quality_gates.py",
          "line": 468,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack vector validation too strict: {e}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'/root/repo/gan_cyber_range/core/attack_gan.py',"
        },
        {
          "file": "quality_gates.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.ultra_minimal import ultraminimalgenerator, attackvector"
        },
        {
          "file": "quality_gates.py",
          "line": 555,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "quality_gates.py",
          "line": 557,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not isinstance(attacks, list):"
        },
        {
          "file": "quality_gates.py",
          "line": 561,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attacks and not isinstance(attacks[0], attackvector):"
        },
        {
          "file": "quality_gates.py",
          "line": 561,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attacks and not isinstance(attacks[0], attackvector):"
        },
        {
          "file": "quality_gates.py",
          "line": 561,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attacks and not isinstance(attacks[0], attackvector):"
        },
        {
          "file": "quality_gates.py",
          "line": 562,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"generate() should return list of attackvector objects\")"
        },
        {
          "file": "quality_gates.py",
          "line": 566,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "quality_gates.py",
          "line": 575,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test 3: check attackvector structure"
        },
        {
          "file": "quality_gates.py",
          "line": 576,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attacks[0]"
        },
        {
          "file": "quality_gates.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attacks[0]"
        },
        {
          "file": "quality_gates.py",
          "line": 578,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "required_attrs = ['attack_type', 'payload', 'techniques', 'severity', 'stealth_level', 'target_syste"
        },
        {
          "file": "quality_gates.py",
          "line": 581,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not hasattr(attack, attr):"
        },
        {
          "file": "quality_gates.py",
          "line": 582,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attackvector missing required attribute: {attr}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 585,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "value = getattr(attack, attr)"
        },
        {
          "file": "quality_gates.py",
          "line": 587,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attackvector.{attr} should not be none\")"
        },
        {
          "file": "quality_gates.py",
          "line": 592,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "large_attacks = generator.generate(num_samples=1000)"
        },
        {
          "file": "quality_gates.py",
          "line": 593,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(large_attacks) > 1000:"
        },
        {
          "file": "quality_gates.py",
          "line": 594,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"generate() returned more attacks than requested\")"
        },
        {
          "file": "quality_gates.py",
          "line": 615,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "original_attacks = generator.generate(num_samples=10)"
        },
        {
          "file": "quality_gates.py",
          "line": 618,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_file = path('/tmp/integrity_test_attacks.json')"
        },
        {
          "file": "quality_gates.py",
          "line": 620,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# save attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 621,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(original_attacks, test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 621,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(original_attacks, test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 628,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# load attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 629,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 629,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 632,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) != len(original_attacks):"
        },
        {
          "file": "quality_gates.py",
          "line": 632,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) != len(original_attacks):"
        },
        {
          "file": "quality_gates.py",
          "line": 633,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack count mismatch: {len(original_attacks)} vs {len(loaded_attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 633,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack count mismatch: {len(original_attacks)} vs {len(loaded_attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 633,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack count mismatch: {len(original_attacks)} vs {len(loaded_attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 637,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, (original, loaded) in enumerate(zip(original_attacks, loaded_attacks)):"
        },
        {
          "file": "quality_gates.py",
          "line": 637,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, (original, loaded) in enumerate(zip(original_attacks, loaded_attacks)):"
        },
        {
          "file": "quality_gates.py",
          "line": 638,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if original.attack_type != loaded.attack_type:"
        },
        {
          "file": "quality_gates.py",
          "line": 638,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if original.attack_type != loaded.attack_type:"
        },
        {
          "file": "quality_gates.py",
          "line": 639,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: attack_type mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 639,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: attack_type mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 643,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: payload mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 647,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: techniques mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 651,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: severity mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 655,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"attack {i}: stealth_level mismatch\")"
        },
        {
          "file": "quality_gates.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(original_attacks[:2], test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(original_attacks[:2], test_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 670,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'attacks' not in data:"
        },
        {
          "file": "quality_gates.py",
          "line": 671,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(\"saved json missing attacks section\")"
        },
        {
          "file": "quality_gates.py",
          "line": 696,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate large number of attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 697,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "large_attacks = generator.generate(num_samples=1000)"
        },
        {
          "file": "quality_gates.py",
          "line": 699,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(large_attacks) != 1000:"
        },
        {
          "file": "quality_gates.py",
          "line": 700,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"large dataset generation failed: {len(large_attacks)}/1000\")"
        },
        {
          "file": "quality_gates.py",
          "line": 704,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "del large_attacks"
        },
        {
          "file": "quality_gates.py",
          "line": 725,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(generator.generate(num_samples=5), temp_file)"
        },
        {
          "file": "quality_gates.py",
          "line": 763,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test 1: attack generation scalability"
        },
        {
          "file": "quality_gates.py",
          "line": 769,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=scale)"
        },
        {
          "file": "quality_gates.py",
          "line": 774,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(attacks),"
        },
        {
          "file": "quality_gates.py",
          "line": 774,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(attacks),"
        },
        {
          "file": "quality_gates.py",
          "line": 781,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"1000-attack generation too slow: {generation_time:.2f}s\")"
        },
        {
          "file": "quality_gates.py",
          "line": 784,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != scale:"
        },
        {
          "file": "quality_gates.py",
          "line": 785,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"scale test {scale}: expected {scale}, got {len(attacks)}\")"
        },
        {
          "file": "quality_gates.py",
          "line": 788,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test 2: concurrent attack execution simulation"
        },
        {
          "file": "quality_gates.py",
          "line": 793,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "batch_attacks = generator.generate(num_samples=50)"
        },
        {
          "file": "quality_gates.py",
          "line": 797,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in batch_attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 797,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in batch_attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 798,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 798,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "quality_gates.py",
          "line": 802,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "execution_rate = len(batch_attacks) / execution_time if execution_time > 0 else 0"
        },
        {
          "file": "quality_gates.py",
          "line": 804,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(batch_attacks),"
        },
        {
          "file": "quality_gates.py",
          "line": 804,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(batch_attacks),"
        },
        {
          "file": "quality_gates.py",
          "line": 809,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if execution_time > 10.0:  # should execute 50 attacks in under 10 seconds"
        },
        {
          "file": "quality_gates.py",
          "line": 810,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "issues.append(f\"batch execution too slow: {execution_time:.2f}s for 50 attacks\")"
        },
        {
          "file": "quality_gates.py",
          "line": 814,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "large_attack_set = generator.generate(num_samples=500)"
        },
        {
          "file": "quality_gates.py",
          "line": 817,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(large_attack_set)"
        },
        {
          "file": "quality_gates.py",
          "line": 821,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(large_attack_set),"
        },
        {
          "file": "quality_gates.py",
          "line": 821,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": len(large_attack_set),"
        },
        {
          "file": "quality_gates.py",
          "line": 888,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "quality_gates.py",
          "line": 905,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=1)"
        },
        {
          "file": "quality_gates.py",
          "line": 905,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=1)"
        },
        {
          "file": "quality_gates.py",
          "line": 905,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=1)"
        },
        {
          "file": "quality_gates.py",
          "line": 906,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attacks:"
        },
        {
          "file": "quality_gates.py",
          "line": 907,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attacks[0])"
        },
        {
          "file": "quality_gates.py",
          "line": 907,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attacks[0])"
        },
        {
          "file": "setup.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"second-generation adversarial cyber range with gan-based attack generation\","
        },
        {
          "file": "simple_demo.py",
          "line": 13,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 13,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 13,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create a simple attackvector"
        },
        {
          "file": "simple_demo.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "simple_demo.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "simple_demo.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test\","
        },
        {
          "file": "simple_demo.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2713 attackvector creation successful\")"
        },
        {
          "file": "simple_demo.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack type: {attack.attack_type}\")"
        },
        {
          "file": "simple_demo.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack type: {attack.attack_type}\")"
        },
        {
          "file": "simple_demo.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - attack type: {attack.attack_type}\")"
        },
        {
          "file": "simple_demo.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - payload: {attack.payload}\")"
        },
        {
          "file": "simple_demo.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  - techniques: {attack.techniques}\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from demo import lightweightattackgenerator, simplecyberrange, demoapi"
        },
        {
          "file": "simple_performance_test.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation_speed():"
        },
        {
          "file": "simple_performance_test.py",
          "line": 29,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation performance\"\"\""
        },
        {
          "file": "simple_performance_test.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\ud83d\udd2c testing attack generation speed...\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "duration, attacks = time_function(generator.generate_batch, batch_size)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 40,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ops_per_sec = len(attacks) / duration"
        },
        {
          "file": "simple_performance_test.py",
          "line": 42,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  {batch_size:>4} attacks: {ops_per_sec:>8.1f} ops/sec ({duration:.3f}s)\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return avg_ops_per_sec > 100  # should generate at least 100 attacks per second"
        },
        {
          "file": "simple_performance_test.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_quality():"
        },
        {
          "file": "simple_performance_test.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation quality and diversity\"\"\""
        },
        {
          "file": "simple_performance_test.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n\ud83c\udfaf testing attack quality...\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(100)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "simple_performance_test.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "simple_performance_test.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_payloads = len(set(attack.payload for attack in attacks))"
        },
        {
          "file": "simple_performance_test.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  attack types: {len(attack_types)}/4\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  attack types: {len(attack_types)}/4\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attacks = 0"
        },
        {
          "file": "simple_performance_test.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "simple_performance_test.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "simple_performance_test.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if (attack.attack_type in ['malware', 'network', 'web', 'social_engineering'] and"
        },
        {
          "file": "simple_performance_test.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if (attack.attack_type in ['malware', 'network', 'web', 'social_engineering'] and"
        },
        {
          "file": "simple_performance_test.py",
          "line": 70,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "0.0 <= attack.severity <= 1.0 and"
        },
        {
          "file": "simple_performance_test.py",
          "line": 71,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "0.0 <= attack.stealth_level <= 1.0 and"
        },
        {
          "file": "simple_performance_test.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "len(attack.target_systems) >= 1):"
        },
        {
          "file": "simple_performance_test.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attacks += 1"
        },
        {
          "file": "simple_performance_test.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "quality_rate = valid_attacks / len(attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "quality_rate = valid_attacks / len(attacks)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return len(attack_types) >= 3 and quality_rate >= 0.95"
        },
        {
          "file": "simple_performance_test.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute some attacks"
        },
        {
          "file": "simple_performance_test.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  range {i+1}: {duration:.3f}s (attacks: {metrics['total_attacks']})\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  range {i+1}: {duration:.3f}s (attacks: {metrics['total_attacks']})\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "simple_performance_test.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 146,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_time = time.time() - start_time"
        },
        {
          "file": "simple_performance_test.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response_times.append(attack_time)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  api call {i+1}: create={create_time:.3f}s, attack={attack_time:.3f}s, info={info_time:.3f}"
        },
        {
          "file": "simple_performance_test.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  api call {i+1}: create={create_time:.3f}s, attack={attack_time:.3f}s, info={info_time:.3f}"
        },
        {
          "file": "simple_performance_test.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "simple_performance_test.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=3)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 235,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 238,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test that we can generate many attacks without issues"
        },
        {
          "file": "simple_performance_test.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  generated batch {i+1}: {len(batch)} attacks\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = generator.generate_attack()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = generator.generate_attack()"
        },
        {
          "file": "simple_performance_test.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  final test attack: {test_attack.attack_type}\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  final test attack: {test_attack.attack_type}\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  final test attack: {test_attack.attack_type}\")"
        },
        {
          "file": "simple_performance_test.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create ranges with attacks"
        },
        {
          "file": "simple_performance_test.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "simple_performance_test.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation speed\", test_attack_generation_speed),"
        },
        {
          "file": "simple_performance_test.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack generation speed\", test_attack_generation_speed),"
        },
        {
          "file": "simple_performance_test.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack quality\", test_attack_quality),"
        },
        {
          "file": "simple_performance_test.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"attack quality\", test_attack_quality),"
        },
        {
          "file": "simple_performance_test.py",
          "line": 367,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2022 attack generation: fast and scalable\")"
        },
        {
          "file": "standalone_test.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "lightweightattackgenerator, simplecyberrange, demoapi,"
        },
        {
          "file": "standalone_test.py",
          "line": 18,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "simpleattackvector, demo_basic_usage"
        },
        {
          "file": "standalone_test.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generator(results):"
        },
        {
          "file": "standalone_test.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generator functionality\"\"\""
        },
        {
          "file": "standalone_test.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "standalone_test.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test single attack"
        },
        {
          "file": "standalone_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = generator.generate_attack()"
        },
        {
          "file": "standalone_test.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = generator.generate_attack()"
        },
        {
          "file": "standalone_test.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack, simpleattackvector)"
        },
        {
          "file": "standalone_test.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack, simpleattackvector)"
        },
        {
          "file": "standalone_test.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type in ['malware', 'network', 'web', 'social_engineering']"
        },
        {
          "file": "standalone_test.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type in ['malware', 'network', 'web', 'social_engineering']"
        },
        {
          "file": "standalone_test.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 0.0 <= attack.severity <= 1.0"
        },
        {
          "file": "standalone_test.py",
          "line": 63,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack.target_systems) >= 1"
        },
        {
          "file": "standalone_test.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(5)"
        },
        {
          "file": "standalone_test.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attacks) == 5"
        },
        {
          "file": "standalone_test.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(a, simpleattackvector) for a in attacks)"
        },
        {
          "file": "standalone_test.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(a, simpleattackvector) for a in attacks)"
        },
        {
          "file": "standalone_test.py",
          "line": 71,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "web_attack = generator.generate_attack('web')"
        },
        {
          "file": "standalone_test.py",
          "line": 71,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "web_attack = generator.generate_attack('web')"
        },
        {
          "file": "standalone_test.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert web_attack.attack_type == 'web'"
        },
        {
          "file": "standalone_test.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert web_attack.attack_type == 'web'"
        },
        {
          "file": "standalone_test.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "results.add_test(\"attack generator\", true)"
        },
        {
          "file": "standalone_test.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "results.add_test(\"attack generator\", false, str(e))"
        },
        {
          "file": "standalone_test.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "standalone_test.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "standalone_test.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "standalone_test.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "standalone_test.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "standalone_test.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "standalone_test.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_id' in result"
        },
        {
          "file": "standalone_test.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "required_keys = ['range_id', 'status', 'total_attacks', 'detection_rate']"
        },
        {
          "file": "standalone_test.py",
          "line": 134,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "standalone_test.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"network\")"
        },
        {
          "file": "standalone_test.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"network\")"
        },
        {
          "file": "standalone_test.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"network\")"
        },
        {
          "file": "standalone_test.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "standalone_test.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "standalone_test.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['attack_type'] == \"network\""
        },
        {
          "file": "standalone_test.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['attack_type'] == \"network\""
        },
        {
          "file": "standalone_test.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "standalone_test.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(100)"
        },
        {
          "file": "standalone_test.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attacks) == 100"
        },
        {
          "file": "standalone_test.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack variety"
        },
        {
          "file": "standalone_test.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(a.attack_type for a in attacks)"
        },
        {
          "file": "standalone_test.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(a.attack_type for a in attacks)"
        },
        {
          "file": "standalone_test.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(a.attack_type for a in attacks)"
        },
        {
          "file": "standalone_test.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_types) >= 2  # should have variety"
        },
        {
          "file": "standalone_test.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "standalone_test.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "standalone_test.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert info['metrics']['total_attacks'] == 2"
        },
        {
          "file": "standalone_test.py",
          "line": 268,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = 0"
        },
        {
          "file": "standalone_test.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "standalone_test.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3)"
        },
        {
          "file": "standalone_test.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3)"
        },
        {
          "file": "standalone_test.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "standalone_test.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "standalone_test.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert info['metrics']['total_attacks'] == 3"
        },
        {
          "file": "standalone_test.py",
          "line": 277,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks += 3"
        },
        {
          "file": "standalone_test.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert total_attacks == 6"
        },
        {
          "file": "standalone_test.py",
          "line": 306,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert info['metrics']['total_attacks'] > 0"
        },
        {
          "file": "standalone_test.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack_generator,"
        },
        {
          "file": "standalone_test.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\u2705 performance: attack generation performs well\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_patterns_basic(self):"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test basic attack pattern structures\"\"\""
        },
        {
          "file": "test_basic_functionality.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackvector"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackvector"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackstep, attackphase"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackstep, attackphase"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackstep, attackphase"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack vector"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector = attackvector("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector = attackvector("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test\","
        },
        {
          "file": "test_basic_functionality.py",
          "line": 168,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_vector.attack_type, \"test\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 168,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_vector.attack_type, \"test\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(len(attack_vector.techniques), 1)"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 171,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack step"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_step = attackstep("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_step = attackstep("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phase=attackphase.exploitation,"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phase=attackphase.exploitation,"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 181,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_step.name, \"test step\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_step.phase, attackphase.exploitation)"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_step.phase, attackphase.exploitation)"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_step.phase, attackphase.exploitation)"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.fail(f\"attack pattern creation failed: {e}\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 268,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack factory"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = attackconfig("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = attackconfig("
        },
        {
          "file": "test_basic_functionality.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web_exploit\","
        },
        {
          "file": "test_basic_functionality.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web_exploit\","
        },
        {
          "file": "test_basic_functionality.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_config.attack_type, \"web_exploit\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_config.attack_type, \"web_exploit\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_config.attack_type, \"web_exploit\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 277,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(attack_config.intensity, \"medium\")"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack factory creation"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "factory = attackfactory()"
        },
        {
          "file": "test_basic_functionality.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'purpose': 'real attack',"
        },
        {
          "file": "test_basic_integration.py",
          "line": 19,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackengine, attackstep, attackphase"
        },
        {
          "file": "test_basic_integration.py",
          "line": 19,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackengine, attackstep, attackphase"
        },
        {
          "file": "test_basic_integration.py",
          "line": 19,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackengine, attackstep, attackphase"
        },
        {
          "file": "test_basic_integration.py",
          "line": 19,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_engine import attackengine, attackstep, attackphase"
        },
        {
          "file": "test_basic_integration.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.evaluation.attack_evaluator import attackqualityevaluator"
        },
        {
          "file": "test_basic_integration.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.evaluation.attack_evaluator import attackqualityevaluator"
        },
        {
          "file": "test_basic_integration.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_evaluation():"
        },
        {
          "file": "test_basic_integration.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack quality evaluation\"\"\""
        },
        {
          "file": "test_basic_integration.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\\\ntesting attack evaluation...\")"
        },
        {
          "file": "test_basic_integration.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.evaluation.attack_evaluator import attackqualityevaluator"
        },
        {
          "file": "test_basic_integration.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.evaluation.attack_evaluator import attackqualityevaluator"
        },
        {
          "file": "test_basic_integration.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackvector"
        },
        {
          "file": "test_basic_integration.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackvector"
        },
        {
          "file": "test_basic_integration.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create mock attack vectors"
        },
        {
          "file": "test_basic_integration.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = ["
        },
        {
          "file": "test_basic_integration.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector("
        },
        {
          "file": "test_basic_integration.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\","
        },
        {
          "file": "test_basic_integration.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector("
        },
        {
          "file": "test_basic_integration.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"malware\","
        },
        {
          "file": "test_basic_integration.py",
          "line": 105,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# evaluate attacks"
        },
        {
          "file": "test_basic_integration.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "evaluator = attackqualityevaluator()"
        },
        {
          "file": "test_basic_integration.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "report = evaluator.evaluate(attacks)"
        },
        {
          "file": "test_basic_integration.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert report.num_attacks_evaluated == 2, f\"expected 2 attacks evaluated, got {report.num_attacks_ev"
        },
        {
          "file": "test_basic_integration.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert report.num_attacks_evaluated == 2, f\"expected 2 attacks evaluated, got {report.num_attacks_ev"
        },
        {
          "file": "test_basic_integration.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert report.num_attacks_evaluated == 2, f\"expected 2 attacks evaluated, got {report.num_attacks_ev"
        },
        {
          "file": "test_basic_integration.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2713 attack evaluation works (score: {report.overall_score:.3f})\")"
        },
        {
          "file": "test_basic_integration.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"\u2717 attack evaluation test failed: {e}\")"
        },
        {
          "file": "test_basic_integration.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack_evaluation,"
        },
        {
          "file": "test_runner.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "lightweightattackgenerator, simplecyberrange, demoapi,"
        },
        {
          "file": "test_runner.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "simpleattackvector, demo_basic_usage"
        },
        {
          "file": "test_runner.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generator(runner):"
        },
        {
          "file": "test_runner.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test the lightweight attack generator\"\"\""
        },
        {
          "file": "test_runner.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "test_runner.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(generator.attack_templates), 4, \"should have 4 attack types\")"
        },
        {
          "file": "test_runner.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(generator.attack_templates), 4, \"should have 4 attack types\")"
        },
        {
          "file": "test_runner.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test single attack generation"
        },
        {
          "file": "test_runner.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = generator.generate_attack()"
        },
        {
          "file": "test_runner.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = generator.generate_attack()"
        },
        {
          "file": "test_runner.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(isinstance(attack, simpleattackvector), \"should generate simpleattackvector\")"
        },
        {
          "file": "test_runner.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(isinstance(attack, simpleattackvector), \"should generate simpleattackvector\")"
        },
        {
          "file": "test_runner.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(isinstance(attack, simpleattackvector), \"should generate simpleattackvector\")"
        },
        {
          "file": "test_runner.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_in(attack.attack_type, ['malware', 'network', 'web', 'social_engineering'])"
        },
        {
          "file": "test_runner.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_in(attack.attack_type, ['malware', 'network', 'web', 'social_engineering'])"
        },
        {
          "file": "test_runner.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(0.0 <= attack.severity <= 1.0, \"severity should be 0-1\")"
        },
        {
          "file": "test_runner.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(len(attack.target_systems) >= 1, \"should have target systems\")"
        },
        {
          "file": "test_runner.py",
          "line": 98,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(5)"
        },
        {
          "file": "test_runner.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(attacks), 5, \"should generate 5 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(attacks), 5, \"should generate 5 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test specific attack type"
        },
        {
          "file": "test_runner.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "web_attack = generator.generate_attack('web')"
        },
        {
          "file": "test_runner.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "web_attack = generator.generate_attack('web')"
        },
        {
          "file": "test_runner.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(web_attack.attack_type, 'web', \"should generate web attack\")"
        },
        {
          "file": "test_runner.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(web_attack.attack_type, 'web', \"should generate web attack\")"
        },
        {
          "file": "test_runner.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(web_attack.attack_type, 'web', \"should generate web attack\")"
        },
        {
          "file": "test_runner.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "test_runner.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "test_runner.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "test_runner.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "test_runner.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "test_runner.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "test_runner.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_in('attack_id', result, \"result should have attack_id\")"
        },
        {
          "file": "test_runner.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_in('attack_id', result, \"result should have attack_id\")"
        },
        {
          "file": "test_runner.py",
          "line": 132,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "expected_keys = ['range_id', 'status', 'total_attacks', 'detection_rate']"
        },
        {
          "file": "test_runner.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "test_runner.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"malware\")"
        },
        {
          "file": "test_runner.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"malware\")"
        },
        {
          "file": "test_runner.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=3, attack_type=\"malware\")"
        },
        {
          "file": "test_runner.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 3, \"should generate 3 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 3, \"should generate 3 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 3, \"should generate 3 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['attack_type'], \"malware\", \"attack type should match\")"
        },
        {
          "file": "test_runner.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['attack_type'], \"malware\", \"attack type should match\")"
        },
        {
          "file": "test_runner.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['attack_type'], \"malware\", \"attack type should match\")"
        },
        {
          "file": "test_runner.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "test_runner.py",
          "line": 206,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation performance"
        },
        {
          "file": "test_runner.py",
          "line": 208,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(100)"
        },
        {
          "file": "test_runner.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(attacks), 100, \"should generate 100 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(len(attacks), 100, \"should generate 100 attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 212,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(generation_time < 5.0, \"should generate 100 attacks in under 5 seconds\")"
        },
        {
          "file": "test_runner.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack variety"
        },
        {
          "file": "test_runner.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "test_runner.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "test_runner.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "test_runner.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "test_runner.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "test_runner.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_greater_equal(len(attack_types), 2, \"should have variety in attack types\")"
        },
        {
          "file": "test_runner.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_greater_equal(len(attack_types), 2, \"should have variety in attack types\")"
        },
        {
          "file": "test_runner.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "test_runner.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "test_runner.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 2, \"should generate 2 attacks per range\")"
        },
        {
          "file": "test_runner.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 2, \"should generate 2 attacks per range\")"
        },
        {
          "file": "test_runner.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(attack_response['generated_attacks'], 2, \"should generate 2 attacks per range\")"
        },
        {
          "file": "test_runner.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(info['metrics']['total_attacks'], 2, \"should have 2 attacks in metrics\")"
        },
        {
          "file": "test_runner.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_equal(info['metrics']['total_attacks'], 2, \"should have 2 attacks in metrics\")"
        },
        {
          "file": "test_runner.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "test_runner.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "test_runner.py",
          "line": 286,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# verify range has attacks"
        },
        {
          "file": "test_runner.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(info['metrics']['total_attacks'] > 0, \"demo should generate attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "runner.assert_true(info['metrics']['total_attacks'] > 0, \"demo should generate attacks\")"
        },
        {
          "file": "test_runner.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(test_attack_generator, \"attack generator tests\"),"
        },
        {
          "file": "test_runner.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(test_attack_generator, \"attack generator tests\"),"
        },
        {
          "file": "test_security_only.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'purpose': 'real attack',"
        },
        {
          "file": "test_structure_validation.py",
          "line": 70,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_gan.py': true,"
        },
        {
          "file": "test_structure_validation.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_engine.py': true"
        },
        {
          "file": "test_structure_validation.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_evaluator.py': true,"
        },
        {
          "file": "test_structure_validation.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'gan_cyber_range/core/attack_gan.py',"
        },
        {
          "file": "test_structure_validation.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'gan_cyber_range/evaluation/attack_evaluator.py',"
        },
        {
          "file": "test_structure_validation.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'gan_cyber_range/core/attack_gan.py',"
        },
        {
          "file": "test_structure_validation.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'gan_cyber_range/evaluation/attack_evaluator.py'"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation(self):"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test basic attack generation\"\"\""
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 71,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# validate attack generation"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(len(attacks), 5)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisnotnone(attack.attack_id)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisnotnone(attack.attack_id)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisnotnone(attack.attack_type)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisnotnone(attack.attack_type)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisnotnone(attack.payload)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisinstance(attack.severity, float)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisinstance(attack.stealth_level, float)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertisinstance(attack.techniques, list)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertgreater(len(attack.techniques), 0)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_diversity(self):"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack diversity calculation\"\"\""
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=10)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.generate_attacks(num_attacks=3)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 110,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 110,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertin(\"attack_id\", result)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertin(\"attacks_executed\", metrics)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertequal(metrics[\"attacks_executed\"], 3)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test valid attack vector"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attack = {"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"malware\","
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(valid_attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(valid_attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.asserttrue(is_valid, f\"valid attack should pass validation: {errors}\")"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test invalid attack vector"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = {"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"invalid_type\","
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(invalid_attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(invalid_attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 165,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertfalse(is_valid, \"invalid attack should fail validation\")"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 223,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"test_attack\", \"malware\", true, 0.9, 1.5)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 223,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"test_attack\", \"malware\", true, 0.9, 1.5)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 389,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = []"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for result in results.get(\"attack_execution_results\", []):"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = {"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 392,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"test\","
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(attack_data)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(attack_data)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 401,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors.append(attack_data)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 401,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors.append(attack_data)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"integration_attacks\", len(attack_vectors))"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"integration_attacks\", len(attack_vectors))"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 432,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "basic_attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validated_attacks = []"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in generator.generate(num_samples=5):"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_dict = {"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 443,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 443,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 443,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 444,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"payload\": attack.payload,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 445,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"techniques\": attack.techniques,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 446,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"severity\": attack.severity,"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 447,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"stealth_level\": attack.stealth_level"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 449,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, _ = validator.validate_attack_vector(attack_dict)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 449,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, _ = validator.validate_attack_vector(attack_dict)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 451,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validated_attacks.append(attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 451,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validated_attacks.append(attack)"
        },
        {
          "file": "comprehensive_test_suite.py",
          "line": 456,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.assertgreater(len(basic_attacks), 0)"
        },
        {
          "file": "quick_start.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# basic attack pattern analysis"
        },
        {
          "file": "quick_start.py",
          "line": 57,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns = ["
        },
        {
          "file": "quick_start.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n\ud83d\udd0d analyzing attack patterns:\")"
        },
        {
          "file": "quick_start.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, pattern in enumerate(attack_patterns, 1):"
        },
        {
          "file": "robust_demo.py",
          "line": 31,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack vector validation"
        },
        {
          "file": "robust_demo.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n1. attack vector validation:\")"
        },
        {
          "file": "robust_demo.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# valid attack vector"
        },
        {
          "file": "robust_demo.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attack = {"
        },
        {
          "file": "robust_demo.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"malware\","
        },
        {
          "file": "robust_demo.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(valid_attack)"
        },
        {
          "file": "robust_demo.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(valid_attack)"
        },
        {
          "file": "robust_demo.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  valid attack: {is_valid}, errors: {len(errors)}\")"
        },
        {
          "file": "robust_demo.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# invalid attack vector"
        },
        {
          "file": "robust_demo.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = {"
        },
        {
          "file": "robust_demo.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"invalid_type\","
        },
        {
          "file": "robust_demo.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(invalid_attack)"
        },
        {
          "file": "robust_demo.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(invalid_attack)"
        },
        {
          "file": "robust_demo.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  invalid attack: {is_valid}, errors: {len(errors)}\")"
        },
        {
          "file": "robust_demo.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack detection events"
        },
        {
          "file": "robust_demo.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_001\", \"malware\", true, 0.95, 1.2)"
        },
        {
          "file": "robust_demo.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_001\", \"malware\", true, 0.95, 1.2)"
        },
        {
          "file": "robust_demo.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_002\", \"network\", false, 0.3, 5.8)"
        },
        {
          "file": "robust_demo.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_002\", \"network\", false, 0.3, 5.8)"
        },
        {
          "file": "robust_demo.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_003\", \"web\", true, 0.88, 0.7)"
        },
        {
          "file": "robust_demo.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_003\", \"web\", true, 0.88, 0.7)"
        },
        {
          "file": "robust_demo.py",
          "line": 140,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"    \u2713 attack detection events recorded\")"
        },
        {
          "file": "robust_demo.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"synthetic_attacks_generated\","
        },
        {
          "file": "robust_demo.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "results.get(\"synthetic_attacks_generated\", 0))"
        },
        {
          "file": "robust_demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"attack_diversity\", results.get(\"attack_diversity_score\", 0))"
        },
        {
          "file": "robust_demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"attack_diversity\", results.get(\"attack_diversity_score\", 0))"
        },
        {
          "file": "robust_demo.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     attack diversity: {results.get('attack_diversity_score', 0):.3f}\")"
        },
        {
          "file": "robust_demo.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"     attack diversity: {results.get('attack_diversity_score', 0):.3f}\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test 1: attack generation optimization"
        },
        {
          "file": "optimized_demo.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n1. optimized attack generation:\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_configs = ["
        },
        {
          "file": "optimized_demo.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for config in attack_configs[:5]:  # test with smaller set"
        },
        {
          "file": "optimized_demo.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack generation"
        },
        {
          "file": "optimized_demo.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "time.sleep(0.02)  # 20ms per attack"
        },
        {
          "file": "optimized_demo.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sequential_results.append({\"attack_id\": f\"attack_{len(sequential_results)}\", \"config\": config})"
        },
        {
          "file": "optimized_demo.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sequential_results.append({\"attack_id\": f\"attack_{len(sequential_results)}\", \"config\": config})"
        },
        {
          "file": "optimized_demo.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "optimized_results = workload_manager.generate_attacks_batch(attack_configs, cache_results=true)"
        },
        {
          "file": "optimized_demo.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "optimized_results = workload_manager.generate_attacks_batch(attack_configs, cache_results=true)"
        },
        {
          "file": "optimized_demo.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  sequential (5 attacks): {sequential_time:.3f}s\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"  optimized (20 attacks): {optimized_time:.3f}s\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "efficiency = (len(attack_configs) / optimized_time) / (5 / sequential_time)"
        },
        {
          "file": "optimized_demo.py",
          "line": 223,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# phase 1: attack generation with validation"
        },
        {
          "file": "optimized_demo.py",
          "line": 224,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"    phase 1: validated attack generation\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_configs = ["
        },
        {
          "file": "optimized_demo.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_type\": \"malware\", \"payload\": f\"malware_{i}\", \"techniques\": [\"t1059\"], \"severity\": 0.7}"
        },
        {
          "file": "optimized_demo.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for config in attack_configs:"
        },
        {
          "file": "optimized_demo.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "is_valid, errors = validator.validate_attack_vector(config)"
        },
        {
          "file": "optimized_demo.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f\"invalid attack config: {errors[0] if errors else 'unknown'}\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks with optimization"
        },
        {
          "file": "optimized_demo.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks = workload_manager.generate_attacks_batch(validated_configs, cache_results=true)"
        },
        {
          "file": "optimized_demo.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks = workload_manager.generate_attacks_batch(validated_configs, cache_results=true)"
        },
        {
          "file": "optimized_demo.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"attacks_generated\", len(generated_attacks))"
        },
        {
          "file": "optimized_demo.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"attacks_generated\", len(generated_attacks))"
        },
        {
          "file": "optimized_demo.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_metric(\"validation_success_rate\", len(validated_configs) / len(attack_configs))"
        },
        {
          "file": "optimized_demo.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"      generated {len(generated_attacks)} validated attacks\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"      generated {len(generated_attacks)} validated attacks\")"
        },
        {
          "file": "optimized_demo.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": f\"threat_{i}\", \"attack_data\": attack}"
        },
        {
          "file": "optimized_demo.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": f\"threat_{i}\", \"attack_data\": attack}"
        },
        {
          "file": "optimized_demo.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(generated_attacks[:15])"
        },
        {
          "file": "optimized_demo.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(generated_attacks[:15])"
        },
        {
          "file": "optimized_demo.py",
          "line": 273,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": f\"scenario_{i}\", \"type\": \"defensive_training\", \"attacks\": generated_attacks[i:i+2]}"
        },
        {
          "file": "optimized_demo.py",
          "line": 273,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": f\"scenario_{i}\", \"type\": \"defensive_training\", \"attacks\": generated_attacks[i:i+2]}"
        },
        {
          "file": "optimized_demo.py",
          "line": 274,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i in range(0, min(10, len(generated_attacks)), 2)"
        },
        {
          "file": "optimized_demo.py",
          "line": 296,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_operations = len(generated_attacks) + len(analysis_results) + len(training_results)"
        },
        {
          "file": "optimized_demo.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_generated\": len(generated_attacks),"
        },
        {
          "file": "optimized_demo.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_generated\": len(generated_attacks),"
        },
        {
          "file": "optimized_demo.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"validation_success_rate\": len(validated_configs) / len(attack_configs),"
        },
        {
          "file": "optimized_demo.py",
          "line": 343,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"name\": \"attack generation\", \"operations\": 20},"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(r\"exploit|attack|payload.*execute\", \"potential exploitation\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(r\"exploit|attack|payload.*execute\", \"potential exploitation\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(r\"exploit|attack|payload.*execute\", \"potential exploitation\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(r\"exploit|attack|payload.*execute\", \"potential exploitation\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 153,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "(r\"backdoor|rootkit|malware.*deploy\", \"malicious software deployment\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 153,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "(r\"backdoor|rootkit|malware.*deploy\", \"malicious software deployment\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 153,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "(r\"backdoor|rootkit|malware.*deploy\", \"malicious software deployment\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 154,
          "pattern": "penetration.*test.*real|pentest.*production",
          "description": "Real penetration testing",
          "context": "(r\"penetration.*test.*real|pentest.*production\", \"real penetration testing\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 155,
          "pattern": "red.*team.*actual|offensive.*operation",
          "description": "Actual offensive operations",
          "context": "(r\"red.*team.*actual|offensive.*operation\", \"actual offensive operations\"),"
        },
        {
          "file": "security_quality_gates_v2.py",
          "line": 155,
          "pattern": "red.*team.*actual|offensive.*operation",
          "description": "Actual offensive operations",
          "context": "(r\"red.*team.*actual|offensive.*operation\", \"actual offensive operations\"),"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 7,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- statistical analysis of attack generation"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"study: gan-based attack generation effectiveness\"\"\""
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# hypothesis: different gan architectures produce varying quality synthetic attacks"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan("
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[\"malware\", \"network\", \"web\"]"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_plan = red_team.generate_attack_plan(scenario['target'], 'data_exfiltration')"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_plan = red_team.generate_attack_plan(scenario['target'], 'data_exfiltration')"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"phases_count\": len(attack_plan['phases']),"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 173,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"stealth_score\": attack_plan.get('stealth_score', 0.0),"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"success_probability\": attack_plan.get('success_probability', 0.0),"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"adaptation_complexity\": self._calculate_adaptation_complexity(attack_plan, scenario['target'])"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate diversity score for synthetic attack data\"\"\""
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate realism score for synthetic attack data\"\"\""
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _calculate_adaptation_complexity(self, attack_plan: dict[str, any], target: dict[str, any]) -> f"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phases_factor = len(attack_plan.get('phases', [])) / 10.0  # normalize to 0-1 range"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "### gan attack generation effectiveness"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- **standard gan performance:** baseline attack generation capabilities demonstrated"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- **diversity metrics:** satisfactory variation in synthetic attack patterns"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "3. **attack innovation:** novel synthetic attack pattern generation"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "3. **attack innovation:** novel synthetic attack pattern generation"
        },
        {
          "file": "examples/advanced_research_example.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- advanced statistical analysis of attack pattern evolution"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 6,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "including gan-based attack generation, network simulation, and security validation."
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan, attackvector"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# step 5: initialize gan for attack generation"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"step 5: setting up gan-based attack generation\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 70,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attackgan("
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 70,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attackgan("
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[\"malware\", \"network\", \"web\"],"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"\u2705 attackgan initialized and ready for synthetic attack generation\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"\u2705 attackgan initialized and ready for synthetic attack generation\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# step 6: generate synthetic attacks"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"step 6: generating synthetic attack vectors\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate 5 synthetic attack patterns"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "synthetic_patterns = attack_gan.generator(noise)"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2705 generated {synthetic_patterns.shape[0]} synthetic attack patterns\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create structured attack vectors"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = []"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attackvector("
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"malware\","
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors.append(vector)"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2705 created {len(attack_vectors)} structured attack vectors\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2705 created {len(attack_vectors)} structured attack vectors\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attack plan"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_plan = red_team.generate_attack_plan(target_info, 'lateral_movement')"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_plan = red_team.generate_attack_plan(target_info, 'lateral_movement')"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2705 generated attack plan with {len(attack_plan['phases'])} phases\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2705 generated attack plan with {len(attack_plan['phases'])} phases\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 124,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "metrics.record_metric('attacks_generated', 'synthetic', len(attack_vectors))"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 124,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "metrics.record_metric('attacks_generated', 'synthetic', len(attack_vectors))"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "metrics.record_metric('plan_phases', 'red_team', len(attack_plan['phases']))"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2694\ufe0f  attack vectors: {len(attack_vectors)}\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2694\ufe0f  attack vectors: {len(attack_vectors)}\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83e\udde0 attack plan phases: {len(attack_plan['phases'])}\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83e\udde0 attack plan phases: {len(attack_plan['phases'])}\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83d\udcca stealth score: {attack_plan.get('stealth_score', 'n/a')}\")"
        },
        {
          "file": "examples/basic_usage_example.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83d\udcc8 success probability: {attack_plan.get('success_probability', 'n/a')}\")"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "a second-generation adversarial cyber range that combines gan-based attack generation"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackgan = none"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 29,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .core.attack_engine import attacksimulator"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 29,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .core.attack_engine import attacksimulator"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 31,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacksimulator = none"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackfactory = none"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackconfig = none"
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 113,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackgan\","
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacksimulator\","
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackfactory\","
        },
        {
          "file": "gan_cyber_range/__init__.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackconfig\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class simpleattackvector:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"lightweight attack vector for demo purposes\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: str"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class lightweightattackgenerator:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"simple attack generator using templates and randomization\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_templates = {"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"csrf attack on {endpoint} with token bypass\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"usb drop attack using {payload_type} at {location}\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack(self, attack_type: optional[str] = none) -> simpleattackvector:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack(self, attack_type: optional[str] = none) -> simpleattackvector:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack(self, attack_type: optional[str] = none) -> simpleattackvector:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate a single synthetic attack\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type is none:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = random.choice(list(self.attack_templates.keys()))"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = random.choice(list(self.attack_templates.keys()))"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "template = random.choice(self.attack_templates[attack_type])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "template = random.choice(self.attack_templates[attack_type])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload = self._fill_template(template, attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return simpleattackvector("
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=str(uuid.uuid4()),"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "techniques=self.mitre_techniques[attack_type],"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_batch(self, count: int = 100, attack_type: optional[str] = none) -> list[simpleattackve"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_batch(self, count: int = 100, attack_type: optional[str] = none) -> list[simpleattackve"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate multiple attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 98,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {count} synthetic attacks\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = []"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generate_attack(attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generate_attack(attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generate_attack(attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 105,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _fill_template(self, template: str, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 142,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_generator = lightweightattackgenerator()"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 142,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_generator = lightweightattackgenerator()"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack tracking"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks = {}"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.completed_attacks = []"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"start attack simulation\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 179,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"starting {duration_minutes}-minute attack simulation\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate and execute attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = self.attack_generator.generate_batch(10)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = self.attack_generator.generate_batch(10)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "time.sleep(random.uniform(0.5, 2.0))  # stagger attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: simpleattackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: simpleattackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: simpleattackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a single attack\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing {attack.attack_type} attack: {attack.attack_id[:8]}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing {attack.attack_type} attack: {attack.attack_id[:8]}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing {attack.attack_type} attack: {attack.attack_id[:8]}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing {attack.attack_type} attack: {attack.attack_id[:8]}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing {attack.attack_type} attack: {attack.attack_id[:8]}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack execution"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success = random.random() < attack.success_probability"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_probability = 1.0 - attack.stealth_level"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"target_hosts\": attack.target_systems,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.completed_attacks.append(result)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self._trigger_detection_event(attack, result)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 222,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = len(self.completed_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 222,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = len(self.completed_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 223,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks = sum(1 for a in self.completed_attacks if a[\"success\"])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 223,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks = sum(1 for a in self.completed_attacks if a[\"success\"])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 224,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = sum(1 for a in self.completed_attacks if a[\"detected\"])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 224,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = sum(1 for a in self.completed_attacks if a[\"detected\"])"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = detected_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = detected_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success_rate = successful_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success_rate = successful_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 235,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": total_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 235,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": total_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"successful_attacks\": successful_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"successful_attacks\": successful_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"detected_attacks\": detected_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"detected_attacks\": detected_attacks,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_summary(self) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get attack summary statistics\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not self.completed_attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return {\"message\": \"no attacks executed yet\"}"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = {}"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 251,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in self.completed_attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 251,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in self.completed_attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# extract attack type from active_attacks if available"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# extract attack type from active_attacks if available"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = \"unknown\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for active_attack in self.active_attacks.values():"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for active_attack in self.active_attacks.values():"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if hasattr(active_attack, 'attack_type'):"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if hasattr(active_attack, 'attack_type'):"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = active_attack.attack_type"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = active_attack.attack_type"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = active_attack.attack_type"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type not in attack_types:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type not in attack_types:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type] = {\"count\": 0, \"success\": 0, \"detected\": 0}"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type] = {\"count\": 0, \"success\": 0, \"detected\": 0}"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 262,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"count\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 262,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"count\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack[\"success\"]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"success\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"success\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack[\"detected\"]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"detected\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types[attack_type][\"detected\"] += 1"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_breakdown\": attack_types,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_breakdown\": attack_types,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"latest_attacks\": self.completed_attacks[-5:],  # last 5 attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"latest_attacks\": self.completed_attacks[-5:],  # last 5 attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"latest_attacks\": self.completed_attacks[-5:],  # last 5 attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _trigger_detection_event(self, attack: simpleattackvector, result: dict[str, any]) -> none:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _trigger_detection_event(self, attack: simpleattackvector, result: dict[str, any]) -> none:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"severity\": attack.severity,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 298,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83d\udea8 attack detected: {attack.attack_type} on {result['target_hosts']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 298,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83d\udea8 attack detected: {attack.attack_type} on {result['target_hosts']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 298,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\ud83d\udea8 attack detected: {attack.attack_type} on {result['target_hosts']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, range_id: str, count: int = 10, attack_type: str = none) -> dict[str, any"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, range_id: str, count: int = 10, attack_type: str = none) -> dict[str, any"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate and execute attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.attack_generator.generate_batch(count, attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.attack_generator.generate_batch(count, attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = cyber_range.attack_generator.generate_batch(count, attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute attacks"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 353,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"generated_attacks\": count,"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack_type or \"mixed\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack_type or \"mixed\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"summary\": cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 375,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n2. generating synthetic attacks...\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   generated {attack_response['generated_attacks']} attacks\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   generated {attack_response['generated_attacks']} attacks\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   generated {attack_response['generated_attacks']} attacks\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 378,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   attack type: {attack_response['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 378,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   attack type: {attack_response['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 378,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   attack type: {attack_response['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   total attacks: {metrics['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   total attacks: {metrics['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 389,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n4. recent attack details:\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks_info = info_response[\"attacks\"]"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks_info = info_response[\"attacks\"]"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"latest_attacks\" in attacks_info:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"latest_attacks\" in attacks_info:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 392,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks_info[\"latest_attacks\"][-3:], 1):"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 392,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks_info[\"latest_attacks\"][-3:], 1):"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 392,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(attacks_info[\"latest_attacks\"][-3:], 1):"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 393,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "status = \"\u2705 success\" if attack[\"success\"] else \"\u274c failed\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 394,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection = \"\ud83d\udea8 detected\" if attack[\"detected\"] else \"\ud83d\udc7b undetected\""
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 395,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   attack {i}: {status} | {detection}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"\\n5. generating different attack types...\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 398,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in [\"network\", \"web\", \"social_engineering\"]:"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   generating {attack_type} attacks...\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   generating {attack_type} attacks...\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = api.generate_attacks(range_id, count=3, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = api.generate_attacks(range_id, count=3, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = api.generate_attacks(range_id, count=3, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   total attacks executed: {final_metrics['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"   total attacks executed: {final_metrics['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 43,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "\"backdoor.{variant} --listen {port} --callback {domain}\","
        },
        {
          "file": "gan_cyber_range/demo.py",
          "line": 124,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "\"payload_type\": random.choice([\"keylogger\", \"credential stealer\", \"backdoor\"]),"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan()"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 42,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan()"
        },
        {
          "file": "gan_cyber_range/__main__.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"generation mode - ready to generate synthetic attacks\")"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = mock(spec=attackfactory)"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = mock(spec=attackfactory)"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory,"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"execute multi-stage attack campaign\","
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"document attack methodology\""
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_patterns\": ["
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(scenario.attack_patterns) == 4"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_patterns\": ["
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 362,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"collaborative attack and defense exercise\","
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 369,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"understand attacker methodologies from defender perspective\","
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 370,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"improve detection capabilities through simulated attacks\","
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"name\": \"attack_execution\", \"duration\": timedelta(hours=3), \"red_team_lead\": true},"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"safe_attack_environment\": true"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 393,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": \"rt_exploit\", \"role\": \"exploit_developer\", \"skill_level\": \"advanced\", \"team_color\": \"red\"},"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 393,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"id\": \"rt_exploit\", \"role\": \"exploit_developer\", \"skill_level\": \"advanced\", \"team_color\": \"red\"},"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"attack_vector_discussion\", \"phase\": \"planning\", \"vector\": \"phishing_campaign\"},"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 427,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack execution with real-time blue team observation"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"attack_initiated\", \"phase\": \"attack_execution\", \"attack_type\": \"initial_compromise\"}"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"attack_initiated\", \"phase\": \"attack_execution\", \"attack_type\": \"initial_compromise\"}"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"attack_initiated\", \"phase\": \"attack_execution\", \"attack_type\": \"initial_compromise\"}"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"blue_team_detection\", \"phase\": \"attack_execution\", \"detection\": \"suspicious_email_cl"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"red_team_adaptation\", \"phase\": \"attack_execution\", \"adaptation\": \"alternate_c2_chann"
        },
        {
          "file": "tests/test_advanced_scenarios.py",
          "line": 433,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"event_type\": \"joint_log_analysis\", \"phase\": \"detection_analysis\", \"participants\": [\"rt_exploit\", \""
        },
        {
          "file": "tests/test_api.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert \"attack_gan\" in component_names"
        },
        {
          "file": "tests/test_api.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testattackgenerationendpoints:"
        },
        {
          "file": "tests/test_api.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack generation endpoint tests\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks_success(self, client, auth_headers):"
        },
        {
          "file": "tests/test_api.py",
          "line": 199,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test successful attack generation\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\", \"malware\"],"
        },
        {
          "file": "tests/test_api.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=auth_headers)"
        },
        {
          "file": "tests/test_api.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert \"attacks\" in data"
        },
        {
          "file": "tests/test_api.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(data[\"attacks\"]) <= request_data[\"num_samples\"]"
        },
        {
          "file": "tests/test_api.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks_invalid_params(self, client, auth_headers):"
        },
        {
          "file": "tests/test_api.py",
          "line": 218,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation with invalid parameters\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 220,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [],  # empty list should fail"
        },
        {
          "file": "tests/test_api.py",
          "line": 224,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=auth_headers)"
        },
        {
          "file": "tests/test_api.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks_unauthorized(self, client):"
        },
        {
          "file": "tests/test_api.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation without authentication\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_api.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data)"
        },
        {
          "file": "tests/test_api.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks_insufficient_role(self, client):"
        },
        {
          "file": "tests/test_api.py",
          "line": 238,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation with insufficient role\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_api.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=headers)"
        },
        {
          "file": "tests/test_api.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_campaign(self, client, auth_headers):"
        },
        {
          "file": "tests/test_api.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating an attack campaign\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"/attacks/generate\","
        },
        {
          "file": "tests/test_api.py",
          "line": 545,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_test_attack_vector():"
        },
        {
          "file": "tests/test_api.py",
          "line": 546,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a test attack vector\"\"\""
        },
        {
          "file": "tests/test_api.py",
          "line": 548,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"network\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "comprehensive tests for attackgan module."
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 15,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import ("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackgan, attackvector, attackvectorizer,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackgan, attackvector, attackvectorizer,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackgan, attackvector, attackvectorizer,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testattackvectorizer:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attackvectorizer functionality\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer(vocab_size=1000, embedding_dim=256)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer(vocab_size=10)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = ["
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"sql injection attack\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer.fit(attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "expected_tokens = [\"sql\", \"injection\", \"attack\", \"xss\", \"payload\", \"script\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_transform_single_attack(self):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test transforming single attack to vector\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer(vocab_size=100, embedding_dim=128)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\", \"malware execution\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\", \"malware execution\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer.fit(attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_transform_multiple_attacks(self):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 63,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test transforming multiple attacks\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer(vocab_size=100, embedding_dim=64)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\", \"malware execution\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\", \"malware execution\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer.fit(attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = [\"sql injection\", \"xss attack\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = [\"sql injection\", \"xss attack\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = vectorizer.transform(attacks)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer(vocab_size=100, embedding_dim=32)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [\"sql injection\", \"xss attack\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer.fit(attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectors = vectorizer.transform(attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, str) for attack in reconstructed)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, str) for attack in reconstructed)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectorizer = attackvectorizer()"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "text = \"sql injection. attack payload!\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "expected = [\"sql\", \"injection\", \"attack\", \"payload!\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 170,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testattackvector:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 171,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attackvector dataclass\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating attack vector\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert vector.attack_type == \"web\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 194,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack vector with metadata\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"malware\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testattackgan:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test main attackgan class\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def sample_attack_data(self):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"sample attack data for testing\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 225,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def attack_gan(self):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create attackgan instance for testing\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attackgan("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 229,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[\"web\", \"malware\"],"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_init(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 235,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attackgan initialization\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan.architecture == \"standard\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan.attack_types == [\"web\", \"malware\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan.attack_types == [\"web\", \"malware\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 238,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan.noise_dim == 32"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan.device.type == \"cpu\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack_gan.generator, generator)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack_gan.discriminator, discriminator)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack_gan, 'g_optimizer')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack_gan, 'd_optimizer')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack_gan.vectorizer, attackvectorizer)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack_gan.vectorizer, attackvectorizer)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.logger')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_with_list_data(self, mock_logger, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_with_list_data(self, mock_logger, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test training with list of attack data\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "history = attack_gan.train("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attacks=sample_attack_data,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attacks=sample_attack_data,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 269,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.logger')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_with_file_data(self, mock_logger, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_with_file_data(self, mock_logger, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 275,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in sample_attack_data:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 275,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in sample_attack_data:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f.write(attack + '\\n')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "history = attack_gan.train("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attacks=temp_file,"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test generating synthetic attacks\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 297,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 297,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 299,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated = attack_gan.generate("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, attackvector) for attack in generated)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, attackvector) for attack in generated)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, attackvector) for attack in generated)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check attack vector properties"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = generated[0]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack, 'attack_type')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack, 'attack_type')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack, 'payload')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 315,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert hasattr(attack, 'techniques')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_diversity_score(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_diversity_score(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate some attacks"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = attack_gan.generate(num_samples=3, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = attack_gan.generate(num_samples=3, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 326,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) >= 2:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 331,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# if not enough attacks generated, diversity should be 0"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_save_and_load_model(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_save_and_load_model(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "original_history = attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "original_history = attack_gan.train(sample_attack_data, epochs=1, batch_size=2)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.save_model(model_path)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert (model_path / \"attack_gan_model.pth\").exists()"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "new_gan = attackgan(device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_vector(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_vector(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating attack vector from string\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_str = \"sql injection union select password\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attack_gan._create_attack_vector(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attack_gan._create_attack_vector(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attack_gan._create_attack_vector(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 361,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(vector, attackvector)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 362,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert vector.payload == attack_str"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 363,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(vector.attack_type, str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_classify_attack_type(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_classify_attack_type(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 369,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack type classification\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"sql injection attack\", \"web\"),"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 379,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_str, expected_type in test_cases:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attack_gan._classify_attack_type(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attack_gan._classify_attack_type(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attack_gan._classify_attack_type(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert result in attack_gan.attack_types"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert result in attack_gan.attack_types"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 386,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_extract_techniques(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 393,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"simple attack\", [\"t1001\"])  # default"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 396,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_str, expected in test_cases:"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attack_gan._extract_techniques(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attack_gan._extract_techniques(attack_str)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_str != \"simple attack\":  # skip default case"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_str != \"simple attack\":  # skip default case"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 405,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_is_valid_attack(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 405,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_is_valid_attack(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 406,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack validation\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# valid attack"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(valid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(valid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(valid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 419,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# invalid attack - too short payload"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 420,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 420,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "invalid_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(invalid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(invalid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(invalid_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# low stealth attack with filtering enabled"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "low_stealth_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "low_stealth_attack = attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 432,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\","
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=true)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=true)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=true)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_gan._is_valid_attack(low_stealth_attack, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_discriminator(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_discriminator(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 446,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.vectorizer.fit(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 446,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan.vectorizer.fit(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 447,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = attack_gan.vectorizer.transform(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 447,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = attack_gan.vectorizer.transform(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 447,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = attack_gan.vectorizer.transform(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "batch = attack_vectors[:2]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 451,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "d_loss = attack_gan._train_discriminator(batch)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 456,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_train_generator(self, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 460,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "g_loss = attack_gan._train_generator(batch_size)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 466,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_load_attack_data_file_not_found(self, mock_open, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 466,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_load_attack_data_file_not_found(self, mock_open, attack_gan):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 467,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test handling of missing attack data file\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 470,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan._load_attack_data(\"nonexistent_file.txt\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 470,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan._load_attack_data(\"nonexistent_file.txt\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 472,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_load_attack_data_directory(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 472,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_load_attack_data_directory(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 472,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_load_attack_data_directory(self, attack_gan, sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 473,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test loading attack data from directory\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 479,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 479,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i, attack in enumerate(sample_attack_data):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 480,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "file_path = temp_path / f\"attacks_{i}.txt\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 481,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "file_path.write_text(attack + '\\n')"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 484,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_data = attack_gan._load_attack_data(temp_path)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 484,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_data = attack_gan._load_attack_data(temp_path)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 487,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(loaded_data) == len(sample_attack_data)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 495,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(architecture=arch, device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 504,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_empty_attack_data(self):"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test handling of empty attack data\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 507,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 511,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan.train(real_attacks=[], epochs=1)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 517,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=\"invalid_device\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 524,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 525,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sample_data = [\"sql injection\", \"xss attack\"]"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 532,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test generating attacks with untrained model\"\"\""
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 534,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 537,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = gan.generate(num_samples=2, filter_detectable=false)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 538,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attacks, list)"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 543,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=\"cpu\")"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 548,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# single attack"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 549,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "single_attack = [attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 549,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "single_attack = [attackvector("
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"web\", payload=\"test\", techniques=[\"t1059\"],"
        },
        {
          "file": "tests/test_attack_gan.py",
          "line": 553,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert gan.diversity_score(single_attack) == 0.0"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert metrics.active_attacks == 0"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "active_attacks=3,"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert metrics.active_attacks == 3"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.attack_engine = mock()"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert cyber_range.attack_engine.stop_all_attacks.called"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert cyber_range.attack_engine.stop_all_attacks.called"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 299,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_execute_attack_not_running(self, cyber_range):"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test executing attack when range is not running\"\"\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = {\"name\": \"test_attack\"}"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = {\"name\": \"test_attack\"}"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.execute_attack(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_execute_attack_running(self, mock_docker, cyber_range):"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test executing attack when range is running\"\"\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# mock attack engine"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 320,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.attack_engine = mock()"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.attack_engine.execute_attack.return_value = \"attack_123\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.attack_engine.execute_attack.return_value = \"attack_123\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 321,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range.attack_engine.execute_attack.return_value = \"attack_123\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = {\"name\": \"test_attack\", \"technique_id\": \"t1059\"}"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = {\"name\": \"test_attack\", \"technique_id\": \"t1059\"}"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id = cyber_range.execute_attack(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id = cyber_range.execute_attack(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id = cyber_range.execute_attack(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 326,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_id == \"attack_123\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 326,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_id == \"attack_123\""
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert cyber_range.attack_engine.execute_attack.called_with(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert cyber_range.attack_engine.execute_attack.called_with(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert cyber_range.attack_engine.execute_attack.called_with(attack_config)"
        },
        {
          "file": "tests/test_cyber_range.py",
          "line": 340,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_event = {'attack_id': 'test', 'confidence': 0.8}"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "including attack generation, cyber range management, security, and performance."
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "lightweightattackgenerator, simplecyberrange, demoapi,"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "simpleattackvector"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testlightweightattackgenerator:"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test the lightweight attack generator\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.generator = lightweightattackgenerator()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(self.generator.attack_templates) == 4"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'malware' in self.generator.attack_templates"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'network' in self.generator.attack_templates"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'web' in self.generator.attack_templates"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'social_engineering' in self.generator.attack_templates"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_single_attack(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test generating a single attack\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack, simpleattackvector)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert isinstance(attack, simpleattackvector)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 57,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_id is not none"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 57,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_id is not none"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type in ['malware', 'network', 'web', 'social_engineering']"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type in ['malware', 'network', 'web', 'social_engineering']"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 0.0 <= attack.severity <= 1.0"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 0.0 <= attack.stealth_level <= 1.0"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 0.0 <= attack.success_probability <= 1.0"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack.target_systems) >= 1"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 63,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack.techniques) >= 1"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_specific_attack_type(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test generating attacks of specific type\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in ['malware', 'network', 'web', 'social_engineering']:"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generator.generate_attack(attack_type)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generator.generate_attack(attack_type)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.generator.generate_attack(attack_type)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type == attack_type"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type == attack_type"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 69,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack.attack_type == attack_type"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test generating multiple attacks\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = self.generator.generate_batch(10)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attacks) == 10"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, simpleattackvector) for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, simpleattackvector) for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, simpleattackvector) for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 76,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(isinstance(attack, simpleattackvector) for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test with specific attack type"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "web_attacks = self.generator.generate_batch(5, 'web')"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(web_attacks) == 5"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(attack.attack_type == 'web' for attack in web_attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(attack.attack_type == 'web' for attack in web_attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(attack.attack_type == 'web' for attack in web_attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert all(attack.attack_type == 'web' for attack in web_attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_execute_attack(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack execution\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_id' in result"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'range_id', 'status', 'uptime_seconds', 'total_attacks',"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks', 'detected_attacks', 'detection_rate',"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks', 'detected_attacks', 'detection_rate',"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_summary(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack summary generation\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute some attacks"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = self.cyber_range.attack_generator.generate_attack()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary = self.cyber_range.get_attack_summary()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_breakdown' in summary or 'latest_attacks' in summary"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_breakdown' in summary or 'latest_attacks' in summary"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'latest_attacks' in summary:"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(summary['latest_attacks']) <= 5"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attacks' in info"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_generate_attacks(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation via api\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = self.api.create_range(\"attack-test-range\")"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=5, attack_type=\"malware\")"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'generated_attacks' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'generated_attacks' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_type' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'attack_type' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'results' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert 'summary' in attack_response"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 218,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 5"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 218,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 5"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['attack_type'] == \"malware\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['attack_type'] == \"malware\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 220,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_response['results']) == 5"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test xss attack detection\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_config_validation(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack configuration validation\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 286,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.validator.validate_attack_config(safe_config)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.validator.validate_attack_config(unsafe_config)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 315,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_network_attack_detection(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test network attack detection\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 509,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 510,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=3)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 510,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=3)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 511,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 511,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 3"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 516,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert metrics['total_attacks'] == 3"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 532,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 532,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = self.api.generate_attacks(range_id, count=2)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 2"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_response['generated_attacks'] == 2"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 561,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation_performance(self):"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 562,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation performance\"\"\""
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 563,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = lightweightattackgenerator()"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 566,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate_batch(1000)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attacks) == 1000"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 570,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert generation_time < 10.0  # should generate 1000 attacks in under 10 seconds"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 572,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# verify attack quality"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 574,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_types) >= 2  # should have variety in attack types"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 574,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_types) >= 2  # should have variety in attack types"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 607,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5)"
        },
        {
          "file": "tests/test_demo_system.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = api.generate_attacks(range_id, count=5)"
        },
        {
          "file": "tests/test_factories.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_factories.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_factories.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_factories.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class testattackfactory:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 18,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test suite for attackfactory\"\"\""
        },
        {
          "file": "tests/test_factories.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attackfactory(self.security_manager)"
        },
        {
          "file": "tests/test_factories.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attackfactory(self.security_manager)"
        },
        {
          "file": "tests/test_factories.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_gan_default_config(self):"
        },
        {
          "file": "tests/test_factories.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating attackgan with default configuration\"\"\""
        },
        {
          "file": "tests/test_factories.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.security_manager.validate_use_case.assert_called_with(\"research\", \"attack_generation\")"
        },
        {
          "file": "tests/test_factories.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_gan_custom_config(self):"
        },
        {
          "file": "tests/test_factories.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating attackgan with custom configuration\"\"\""
        },
        {
          "file": "tests/test_factories.py",
          "line": 40,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config = attackconfig("
        },
        {
          "file": "tests/test_factories.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[\"network\", \"web\"]"
        },
        {
          "file": "tests/test_factories.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = self.attack_factory.create_attack_gan(config)"
        },
        {
          "file": "tests/test_factories.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = self.attack_factory.create_attack_gan(config)"
        },
        {
          "file": "tests/test_factories.py",
          "line": 57,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[\"network\", \"web\"],"
        },
        {
          "file": "tests/test_factories.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.redteamllm') as mock_llm:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "llm = self.attack_factory.create_red_team_llm()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_factories.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan1 = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan1 = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan2 = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan2 = self.attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stats = self.attack_factory.get_cache_stats()"
        },
        {
          "file": "tests/test_factories.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scenario = self.attack_factory.create_training_scenario("
        },
        {
          "file": "tests/test_factories.py",
          "line": 115,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert scenario[\"attack_types\"] == [\"reconnaissance\", \"lateral_movement\", \"data_exfiltration\"]"
        },
        {
          "file": "tests/test_factories.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_create_attack_scenario_topology(self):"
        },
        {
          "file": "tests/test_factories.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test creating topology optimized for attack scenarios\"\"\""
        },
        {
          "file": "tests/test_factories.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "topology = self.network_factory.create_attack_scenario_topology("
        },
        {
          "file": "tests/test_integration.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "tests/test_integration.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "tests/test_integration.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_complete_attack_generation_workflow(self, client, researcher_headers):"
        },
        {
          "file": "tests/test_integration.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test complete attack generation workflow\"\"\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# step 1: generate attacks"
        },
        {
          "file": "tests/test_integration.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_request = {"
        },
        {
          "file": "tests/test_integration.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\", \"malware\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = response.json()"
        },
        {
          "file": "tests/test_integration.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert \"job_id\" in attack_data"
        },
        {
          "file": "tests/test_integration.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_data[\"attacks\"]) > 0"
        },
        {
          "file": "tests/test_integration.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(attack_data[\"attacks\"]) > 0"
        },
        {
          "file": "tests/test_integration.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# step 2: use generated attacks in a campaign"
        },
        {
          "file": "tests/test_integration.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"objective\": \"test attack execution workflow\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# this would involve creating training session, running attacks, monitoring responses"
        },
        {
          "file": "tests/test_integration.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.attackgan')"
        },
        {
          "file": "tests/test_integration.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.attackgan')"
        },
        {
          "file": "tests/test_integration.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_gan_integration(self, mock_gan_class, client, researcher_headers):"
        },
        {
          "file": "tests/test_integration.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attackgan integration with api\"\"\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 261,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# mock attackgan behavior"
        },
        {
          "file": "tests/test_integration.py",
          "line": 277,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "tests/test_integration.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 283,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 287,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert len(data[\"attacks\"]) == 1"
        },
        {
          "file": "tests/test_integration.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert data[\"attacks\"][0][\"attack_type\"] == \"network\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert data[\"attacks\"][0][\"attack_type\"] == \"network\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "mock_range.get_metrics.return_value = {\"attacks\": 5, \"detections\": 3}"
        },
        {
          "file": "tests/test_integration.py",
          "line": 413,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_concurrent_attack_generation(self, client, researcher_headers):"
        },
        {
          "file": "tests/test_integration.py",
          "line": 414,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test concurrent attack generation requests\"\"\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 420,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks():"
        },
        {
          "file": "tests/test_integration.py",
          "line": 422,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 427,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "thread = threading.thread(target=generate_attacks)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 470,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 474,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 514,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.attackgan')"
        },
        {
          "file": "tests/test_integration.py",
          "line": 514,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@patch('gan_cyber_range.core.attack_gan.attackgan')"
        },
        {
          "file": "tests/test_integration.py",
          "line": 515,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation_error_handling(self, mock_gan_class, client, researcher_headers):"
        },
        {
          "file": "tests/test_integration.py",
          "line": 516,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test error handling in attack generation\"\"\""
        },
        {
          "file": "tests/test_integration.py",
          "line": 517,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# mock attackgan to raise exception"
        },
        {
          "file": "tests/test_integration.py",
          "line": 523,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 527,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=request_data, headers=researcher_headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# invalid attack generation"
        },
        {
          "file": "tests/test_integration.py",
          "line": 553,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"endpoint\": \"/attacks/generate\","
        },
        {
          "file": "tests/test_integration.py",
          "line": 554,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"data\": {\"attack_types\": \"invalid\", \"num_samples\": -1}"
        },
        {
          "file": "tests/test_integration.py",
          "line": 616,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_request = {"
        },
        {
          "file": "tests/test_integration.py",
          "line": 617,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 621,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 621,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=headers)"
        },
        {
          "file": "tests/test_integration.py",
          "line": 652,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_request = {"
        },
        {
          "file": "tests/test_integration.py",
          "line": 653,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_integration.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=user[\"headers\"])"
        },
        {
          "file": "tests/test_integration.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=attack_request, headers=user[\"headers\"])"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": {\"types\": [\"phishing\", \"lateral_movement\"]},"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"deploy_attacks\","
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = mock()"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory,"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 482,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "pipelinetype.attack_generation,"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 483,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"test attack generation pipeline\""
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 489,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert pipeline.name == \"test attack generation pipeline\""
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 490,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert pipeline.pipeline_type == pipelinetype.attack_generation"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 675,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "pipelinetype.attack_generation,"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 676,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack gen pipeline\""
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 691,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert library[pipeline1_id][\"name\"] == \"attack gen pipeline\""
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 692,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert library[pipeline1_id][\"type\"] == pipelinetype.attack_generation.value"
        },
        {
          "file": "tests/test_orchestration.py",
          "line": 699,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.pipeline_manager.create_pipeline(pipelinetype.attack_generation, \"pipeline 1\")"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.factories.attack_factory import attackfactory, attackconfig"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_factory_creation_performance(self):"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 29,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"benchmark attack factory object creation performance\"\"\""
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(self.security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(self.security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan') as mock_gan:"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()  # should hit cache"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()  # should hit cache"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = mock()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "orchestrator = scenarioorchestrator(workflow_engine, attack_factory, range_factory)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "(\"research\", \"attack_generation\"),"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan'), \\"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan'), \\"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "patch('gan_cyber_range.factories.attack_factory.redteamllm'), \\"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# 2. create attack components"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = attackconfig(attack_types=[\"network\", \"web\"])"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = attackconfig(attack_types=[\"network\", \"web\"])"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_config = attackconfig(attack_types=[\"network\", \"web\"])"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attack_factory.create_attack_gan(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attack_factory.create_attack_gan(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attack_factory.create_attack_gan(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = attack_factory.create_attack_gan(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "red_team_llm = attack_factory.create_red_team_llm(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "red_team_llm = attack_factory.create_red_team_llm(attack_config)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.clear_cache()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 471,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan'), \\"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 471,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "with patch('gan_cyber_range.factories.attack_factory.attackgan'), \\"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 476,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 476,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = attackfactory(security_manager)"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 480,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 480,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory.create_attack_gan()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 483,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "components.extend([attack_factory, range_factory])"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 582,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory = mock()"
        },
        {
          "file": "tests/test_performance_benchmarks.py",
          "line": 585,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "orchestrator = scenarioorchestrator(workflow_engine, attack_factory, range_factory)"
        },
        {
          "file": "tests/test_security.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "tests/test_security.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from gan_cyber_range.core.attack_gan import attackgan"
        },
        {
          "file": "tests/test_security.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_sql_injection_attack_generation(self, client, auth_headers):"
        },
        {
          "file": "tests/test_security.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test sql injection in attack generation\"\"\""
        },
        {
          "file": "tests/test_security.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"'; drop table attacks; --\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"'; drop table attacks; --\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=malicious_request, headers=auth_headers)"
        },
        {
          "file": "tests/test_security.py",
          "line": 188,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test path traversal attack prevention\"\"\""
        },
        {
          "file": "tests/test_security.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json=malicious_request, headers=auth_headers)"
        },
        {
          "file": "tests/test_security.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json={"
        },
        {
          "file": "tests/test_security.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = client.post(\"/attacks/generate\", json={"
        },
        {
          "file": "tests/test_security.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_payload_sanitization(self, security_manager):"
        },
        {
          "file": "tests/test_security.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack payload sanitization\"\"\""
        },
        {
          "file": "tests/test_security.py",
          "line": 353,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sanitized = security_manager.sanitize_attack_payload(malicious_payload)"
        },
        {
          "file": "tests/test_security.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_generation_validation(self, security_manager):"
        },
        {
          "file": "tests/test_security.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack generation request validation\"\"\""
        },
        {
          "file": "tests/test_security.py",
          "line": 509,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"network\", \"malware\"],"
        },
        {
          "file": "tests/test_security.py",
          "line": 514,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert security_manager.validate_attack_generation_request(valid_request) == true"
        },
        {
          "file": "tests/test_security.py",
          "line": 518,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_types\": [], \"num_samples\": 10},  # empty attack types"
        },
        {
          "file": "tests/test_security.py",
          "line": 518,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_types\": [], \"num_samples\": 10},  # empty attack types"
        },
        {
          "file": "tests/test_security.py",
          "line": 519,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_types\": [\"network\"], \"num_samples\": 0},  # zero samples"
        },
        {
          "file": "tests/test_security.py",
          "line": 520,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_types\": [\"network\"], \"num_samples\": 10000000},  # too many samples"
        },
        {
          "file": "tests/test_security.py",
          "line": 521,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"attack_types\": [\"../../../etc/passwd\"], \"num_samples\": 1},  # path traversal"
        },
        {
          "file": "tests/test_security.py",
          "line": 525,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert security_manager.validate_attack_generation_request(invalid_request) == false"
        },
        {
          "file": "tests/test_security.py",
          "line": 552,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack containment validation\"\"\""
        },
        {
          "file": "tests/test_security.py",
          "line": 553,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test that attacks are properly contained"
        },
        {
          "file": "tests/test_security.py",
          "line": 554,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert security_manager.is_attack_contained(\"10.0.0.1\") == true  # internal ip"
        },
        {
          "file": "tests/test_security.py",
          "line": 555,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert security_manager.is_attack_contained(\"192.168.1.1\") == true  # private ip"
        },
        {
          "file": "tests/test_security.py",
          "line": 556,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert security_manager.is_attack_contained(\"8.8.8.8\") == false  # external ip"
        },
        {
          "file": "tests/test_security.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": \"suspicious_attack_generation\", \"user\": \"testuser\", \"payload\": \"malicious\"},"
        },
        {
          "file": "tests/test_utils.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyberrangeerror, attackexecutionerror, validationerror,"
        },
        {
          "file": "tests/test_utils.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validate_config, networktopologyvalidator, attackconfigvalidator,"
        },
        {
          "file": "tests/test_utils.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack event logging"
        },
        {
          "file": "tests/test_utils.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.log_attack_event("
        },
        {
          "file": "tests/test_utils.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"info\", \"attack executed\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=\"attack_123\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=\"attack_123\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack execution error"
        },
        {
          "file": "tests/test_utils.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_error = attackexecutionerror("
        },
        {
          "file": "tests/test_utils.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_error = attackexecutionerror("
        },
        {
          "file": "tests/test_utils.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "message=\"attack failed\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=\"attack_123\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=\"attack_123\","
        },
        {
          "file": "tests/test_utils.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_error.error_code == \"cr_attack_exec\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_error.error_code == \"cr_attack_exec\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_error.context.attack_id == \"attack_123\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_error.context.attack_id == \"attack_123\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert attack_error.context.attack_id == \"attack_123\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def test_attack_config_validator(self):"
        },
        {
          "file": "tests/test_utils.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test attack configuration validation\"\"\""
        },
        {
          "file": "tests/test_utils.py",
          "line": 261,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validator = attackconfigvalidator()"
        },
        {
          "file": "tests/test_utils.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# valid attack config"
        },
        {
          "file": "tests/test_utils.py",
          "line": 267,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phase': 'exploitation',"
        },
        {
          "file": "tests/test_utils.py",
          "line": 277,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'name': 'bad attack',"
        },
        {
          "file": "tests/test_utils.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phase': 'exploitation',"
        },
        {
          "file": "tests/test_utils.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert validator.validate_attack_payload(safe_payload)"
        },
        {
          "file": "tests/test_utils.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "assert not validator.validate_attack_payload(dangerous_payload)"
        },
        {
          "file": "gan_cyber_range/api/__init__.py",
          "line": 3,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "rest api for cyber range management and attack generation"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack generation, and monitoring with comprehensive error handling."
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 28,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from demo import demoapi, simplecyberrange, simpleattackvector"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackrequest(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: optional[str] = field(none, regex=\"^(malware|network|web|social_engineering)$\")"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@validator('attack_type')"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 65,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_type(cls, v):"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "raise valueerror(f'attack type must be one of: {\", \".join(allowed_types)}')"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks: int"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks: int"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks: int"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackresponse(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks: int"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"secure api for cybersecurity training platform with gan-based attack generation\","
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": metrics[\"total_attacks\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": metrics[\"total_attacks\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@app.post(\"/ranges/{range_id}/attacks\", response_model=attackresponse)"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@app.post(\"/ranges/{range_id}/attacks\", response_model=attackresponse)"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 357,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def generate_attacks("
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "request: attackrequest,"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 362,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate and execute attacks on a cyber range\"\"\""
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {request.count} attacks of type {request.attack_type} on range {range_id}\")"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {request.count} attacks of type {request.attack_type} on range {range_id}\")"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# security check: limit attack generation"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "demo_api.log_security_event(\"excessive_attack_generation\", {"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 382,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detail=\"attack count exceeds maximum limit (50)\""
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 386,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = demo_api.generate_attacks("
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 386,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_response = demo_api.generate_attacks("
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 389,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "request.attack_type"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 395,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attackresponse("
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 396,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks=attack_response[\"generated_attacks\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 396,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks=attack_response[\"generated_attacks\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 396,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks=attack_response[\"generated_attacks\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_response[\"attack_type\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_response[\"attack_type\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_response[\"attack_type\"],"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary=attack_response[\"summary\"]"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"error generating attacks: {e}\")"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detail=f\"failed to generate attacks: {str(e)}\""
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(len(cr.completed_attacks) for cr in demo_api.ranges.values())"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(len(cr.completed_attacks) for cr in demo_api.ranges.values())"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 459,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks_generated\": total_attacks,"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 459,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks_generated\": total_attacks,"
        },
        {
          "file": "gan_cyber_range/api/demo_api.py",
          "line": 461,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"detection_rate_global\": total_detections / max(1, total_attacks),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_gan\": none,"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "app_state[\"attack_gan\"] = attackgan()"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "app_state[\"attack_gan\"] = attackgan()"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "component=\"attack_gan\","
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "status=\"healthy\" if app_state[\"attack_gan\"] else \"unhealthy\","
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "message=\"attackgan initialized\" if app_state[\"attack_gan\"] else \"not initialized\","
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 216,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "message=\"attackgan initialized\" if app_state[\"attack_gan\"] else \"not initialized\","
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack generation endpoints"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@app.post(\"/attacks/generate\", response_model=attackgenerationresponse)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@app.post(\"/attacks/generate\", response_model=attackgenerationresponse)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def generate_attacks("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 315,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "request: attackgenerationrequest,"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic attacks using gan\"\"\""
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not app_state[\"security_manager\"].validate_attack_generation_request(request.dict()):"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detail=\"attack generation request failed security validation\""
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 330,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attacks"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 331,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = app_state[\"attack_gan\"]"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 331,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan = app_state[\"attack_gan\"]"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = attack_gan.generate("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = attack_gan.generate("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 333,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[t.value for t in request.attack_types],"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 333,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=[t.value for t in request.attack_types],"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 340,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = []"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vector = attackvector("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attacktype(attack.get(\"type\", \"network\")),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attacktype(attack.get(\"type\", \"network\")),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attacktype(attack.get(\"type\", \"network\")),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "techniques=attack.get(\"techniques\", []),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload=attack.get(\"payload\", \"\"),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "confidence=attack.get(\"confidence\", 0.8),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sophistication=attack.get(\"sophistication\", 0.5),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detectability=attack.get(\"detectability\", 0.3),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 350,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "metadata=attack.get(\"metadata\", {}),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 353,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors.append(vector)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity_score = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity_score = attack_gan.diversity_score(attacks)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "response = attackgenerationresponse("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 361,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks=attack_vectors,"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 361,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks=attack_vectors,"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 364,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_generated\": len(attacks),"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"filter_rate\": 1.0 - (len(attacks) / request.num_samples)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 369,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_generated=len(attacks)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(attacks)} attacks for user {current_user['username']}\")"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(attacks)} attacks for user {current_user['username']}\")"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"error generating attacks: {e}\")"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 378,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "raise httpexception(status_code=500, detail=\"attack generation failed\")"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 578,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@app.post(\"/redteam/campaigns\", response_model=attackcampaign)"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 579,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def create_attack_campaign("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 583,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attack campaign using llm red team\"\"\""
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 610,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stage = attackstage("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 623,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign = attackcampaign("
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 638,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"created attack campaign {campaign_id} for user {current_user['username']}\")"
        },
        {
          "file": "gan_cyber_range/api/main.py",
          "line": 643,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"error creating attack campaign: {e}\")"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 13,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attacktype(str, enum):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"supported attack types\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack generation models"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackgenerationrequest(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"request to generate synthetic attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[attacktype] = field(..., min_items=1)"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[attacktype] = field(..., min_items=1)"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@validator('attack_types')"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_types(cls, v):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "raise valueerror('duplicate attack types not allowed')"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvector(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generated attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: attacktype"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: attacktype"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackgenerationresponse(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 115,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"response from attack generation\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks: list[attackvector]"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks: list[attackvector]"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"request to generate attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackstage(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 196,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"single stage in attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackcampaign(basemodel):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 208,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generated attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stages: list[attackstage]"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scoring_model: str = field(\"mitre_attack\")"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 334,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class wsattackevent(wsmessage):"
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack event websocket message\"\"\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type: str = \"attack_event\""
        },
        {
          "file": "gan_cyber_range/api/models.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: uuid.uuid"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 655,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = getattr(self.cyber_range, 'total_attacks_executed', 0)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 655,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = getattr(self.cyber_range, 'total_attacks_executed', 0)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 656,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if total_attacks > 0:"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 657,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = len([a for a in self.all_alerts if a.severity in [alertseverity.high, alertseveri"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.metrics.detection_rate = detected_attacks / total_attacks"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.metrics.detection_rate = detected_attacks / total_attacks"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 788,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "rule_name=\"correlated attack activity\","
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 819,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_intensity: str = \"medium\","
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 820,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scoring_model: str = \"mitre_attack\""
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 824,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"starting blue team evaluation - duration: {duration}, intensity: {attack_intensity}\")"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 832,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate and execute attacks"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 833,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results = self._execute_evaluation_attacks(duration_seconds, attack_intensity)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 833,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results = self._execute_evaluation_attacks(duration_seconds, attack_intensity)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 833,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results = self._execute_evaluation_attacks(duration_seconds, attack_intensity)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 839,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scores = self._calculate_scores(attack_results, defense_metrics, scoring_model)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 847,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_intensity': attack_intensity,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 847,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_intensity': attack_intensity,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 849,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_results': attack_results,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 849,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_results': attack_results,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 880,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_evaluation_attacks(self, duration: int, intensity: str) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 881,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute attacks for evaluation\"\"\""
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 883,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack intensity configuration"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 885,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'low': {'attacks_per_minute': 0.5, 'complexity': 'basic'},"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 886,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'medium': {'attacks_per_minute': 2.0, 'complexity': 'intermediate'},"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 887,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'high': {'attacks_per_minute': 5.0, 'complexity': 'advanced'}"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 892,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = int(duration / 60 * config['attacks_per_minute'])"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 892,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = int(duration / 60 * config['attacks_per_minute'])"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 893,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks = 0"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 894,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = 0"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 896,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack execution and detection"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 897,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i in range(total_attacks):"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 898,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack success (varies by complexity)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 900,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_successful = time.time() % 1 < success_rate.get(config['complexity'], 0.8)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 902,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_successful:"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 903,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks += 1"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 908,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks += 1"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 911,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 911,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 912,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks': successful_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 912,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks': successful_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 913,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detected_attacks': detected_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 913,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detected_attacks': detected_attacks,"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 914,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_success_rate': successful_attacks / max(1, total_attacks),"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 914,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_success_rate': successful_attacks / max(1, total_attacks),"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 914,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_success_rate': successful_attacks / max(1, total_attacks),"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 915,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detection_rate': detected_attacks / max(1, successful_attacks)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 915,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detection_rate': detected_attacks / max(1, successful_attacks)"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 920,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results: dict[str, any],"
        },
        {
          "file": "gan_cyber_range/blue_team/defense_suite.py",
          "line": 929,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = attack_results.get('detection_rate', 0.0)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 17,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 19,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..generators.network_gan import networkattackgan"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..generators.web_attack_gan import webattackgan"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..generators.web_attack_gan import webattackgan"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "a second-generation adversarial cyber range that combines gan-based attack generation"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 206,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "@click.option('--gan-type', '-g', type=click.choice(['attack', 'malware', 'network', 'web']),"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"train gan models for attack generation.\"\"\""
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if gan_type == 'attack':"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 234,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan(device=device)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 235,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(\"\ud83e\udde0 initializing attack gan\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 240,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = networkattackgan(device=device)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(\"\ud83c\udf10 initializing network attack gan\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = webattackgan(device=device)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(\"\ud83d\udd78\ufe0f  initializing web attack gan\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attacks=training_data,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 282,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if gan_type == 'attack':"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 284,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"generated {len(samples)} attack samples\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "samples = gan.generate_attack_patterns(num_patterns=10)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"generated {len(samples)} network attack patterns\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "samples = gan.generate_web_attacks(num_attacks=10)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "samples = gan.generate_web_attacks(num_attacks=10)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"generated {len(samples)} web attack sessions\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "required=true, help='attack scenario to execute')"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "default='medium', help='attack intensity')"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute attack scenarios in cyber range.\"\"\""
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"  \ud83c\udfaf attacks executed: {results['attacks_executed']}\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"  \ud83c\udfaf attacks executed: {results['attacks_executed']}\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"  \u2705 successful attacks: {results['successful_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "click.echo(f\"  \u2705 successful attacks: {results['successful_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return [f\"sample_attack_{i}\" for i in range(1000)]"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 457,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'description': 'multi-stage apt attack simulation',"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 462,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'name': 'ransomware attack',"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 470,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phases': ['reconnaissance', 'delivery', 'exploitation'],"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 489,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute attack scenario\"\"\""
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 495,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = random.randint(10, 50)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 496,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks = 0"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 499,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i in range(total_attacks):"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 500,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 503,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_success = random.random() < 0.7  # 70% success rate"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 504,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_success:"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks += 1"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 508,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if blue_team and attack_success:"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 514,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "progress = int((i + 1) / total_attacks * 100)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 519,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks_executed': total_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 519,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks_executed': total_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 520,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks': successful_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 520,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'successful_attacks': successful_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 522,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'success_rate': successful_attacks / total_attacks if total_attacks > 0 else 0,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 522,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'success_rate': successful_attacks / total_attacks if total_attacks > 0 else 0,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 522,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'success_rate': successful_attacks / total_attacks if total_attacks > 0 else 0,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 523,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detection_rate': detections / successful_attacks if successful_attacks > 0 else 0,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 523,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detection_rate': detections / successful_attacks if successful_attacks > 0 else 0,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 540,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(r['attacks_executed'] for r in all_results)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 540,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = sum(r['attacks_executed'] for r in all_results)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_successful = sum(r['successful_attacks'] for r in all_results)"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_successful_attacks': total_successful,"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 563,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "lines = ['scenario,attacks,successful,detections,success rate,detection rate']"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 566,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "line = f\"{scenario['scenario']},{scenario['attacks_executed']},{scenario['successful_attacks']},{sce"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 566,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "line = f\"{scenario['scenario']},{scenario['attacks_executed']},{scenario['successful_attacks']},{sce"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 583,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "<tr><td>total attacks</td><td>{total_attacks}</td></tr>"
        },
        {
          "file": "gan_cyber_range/cli/main.py",
          "line": 583,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "<tr><td>total attacks</td><td>{total_attacks}</td></tr>"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "max_attacks_per_batch: int = 100"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackconfig:"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack generation configuration\"\"\""
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack: attackconfig = field(default_factory=attackconfig)"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack: attackconfig = field(default_factory=attackconfig)"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack: attackconfig = field(default_factory=attackconfig)"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "enable_advanced_attacks: bool = true"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 179,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'performance.max_attacks_per_batch': lambda x: 1 <= x <= 10000,"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 182,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack.default_count': lambda x: 1 <= x <= 1000,"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack.max_count': lambda x: x >= 1,"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack.min_diversity_threshold': lambda x: 0.0 <= x <= 1.0,"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack.max_severity_level': lambda x: 0.0 <= x <= 1.0,"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 568,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'attack' in config_dict:"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config_dict['attack'] = attackconfig(**config_dict['attack'])"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config_dict['attack'] = attackconfig(**config_dict['attack'])"
        },
        {
          "file": "gan_cyber_range/config/config_manager.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config_dict['attack'] = attackconfig(**config_dict['attack'])"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 7,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .minimal_requirements import minimalgenerator as attackgan"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 29,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# minimal attack engine components"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackengine:"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attacksimulator:"
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackgan\","
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackengine\","
        },
        {
          "file": "gan_cyber_range/core/__init__.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacksimulator\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack execution engine for cyber range simulations."
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module provides the core attack execution infrastructure, including"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack orchestration, payload deployment, and attack simulation management."
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack orchestration, payload deployment, and attack simulation management."
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackstatus(enum):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack execution status\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 33,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackphase(enum):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "exploitation = \"exploitation\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "exploitation = \"exploitation\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackstep:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"individual step in an attack sequence\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phase: attackphase"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackresult:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"result of an attack execution\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: str"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "status: attackstatus"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 74,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackcampaign:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"multi-step attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "steps: list[attackstep]"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackengine:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"core attack execution engine\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks = {}"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_history = []"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_templates = {}"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# load default attack templates"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"attack engine initialized\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_config: dict[str, any]) -> str:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_config: dict[str, any]) -> str:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a single attack\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id = str(uuid.uuid4())"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing attack {attack_id}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing attack {attack_id}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack step from config"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_step = self._create_attack_step(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_step = self._create_attack_step(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_step = self._create_attack_step(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 113,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target=self._execute_attack_step,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "args=(attack_id, attack_step),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "args=(attack_id, attack_step),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.execution_threads[attack_id] = thread"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attack_id"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_campaign(self, campaign: attackcampaign) -> str:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 124,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a multi-step attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def stop_attack(self, attack_id: str) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def stop_attack(self, attack_id: str) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 140,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"stop a running attack\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 141,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_id in self.active_attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 141,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_id in self.active_attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 142,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks[attack_id].status = attackstatus.stopped"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 142,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks[attack_id].status = attackstatus.stopped"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 142,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks[attack_id].status = attackstatus.stopped"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"stopped attack {attack_id}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"stopped attack {attack_id}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def stop_all_attacks(self) -> int:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"stop all running attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_id in list(self.active_attacks.keys()):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_id in list(self.active_attacks.keys()):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self.stop_attack(attack_id):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self.stop_attack(attack_id):"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"stopped {stopped_count} attacks\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_status(self, attack_id: str) -> optional[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_status(self, attack_id: str) -> optional[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_status(self, attack_id: str) -> optional[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get status of an attack\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.active_attacks.get(attack_id)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.active_attacks.get(attack_id)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_active_attacks(self) -> list[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_active_attacks(self) -> list[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get all active attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return list(self.active_attacks.values())"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_history(self) -> list[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_history(self) -> list[attackresult]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 167,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get attack execution history\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 168,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_history.copy()"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 170,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def register_attack_template(self, name: str, template: dict[str, any]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 171,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"register a new attack template\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_templates[name] = template"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 173,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"registered attack template: {name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_step(self, config: dict[str, any]) -> attackstep:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_step(self, config: dict[str, any]) -> attackstep:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create an attack step from configuration\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "template = self.attack_templates.get(config['template'], {})"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attackstep("
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 188,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "name=merged_config.get('name', 'unknown attack'),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phase=attackphase(merged_config.get('phase', 'exploitation')),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "phase=attackphase(merged_config.get('phase', 'exploitation')),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step(self, attack_id: str, step: attackstep) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step(self, attack_id: str, step: attackstep) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step(self, attack_id: str, step: attackstep) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a single attack step\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 200,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack result"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attackresult("
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 202,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_id,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 202,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_id,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "status=attackstatus.running,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks[attack_id] = result"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.active_attacks[attack_id] = result"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 212,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"executing attack step: {step.name} on {step.target_host}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# execute attack technique"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.completed if success else attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.completed if success else attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.artifacts = self._generate_attack_artifacts(step, target_host, success)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# trigger detection events if attack was successful"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"attack step completed: {step.name} - success: {success}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 245,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"attack step failed: {step.name} - error: {e}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_history.append(result)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_id in self.active_attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_id in self.active_attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "del self.active_attacks[attack_id]"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "del self.active_attacks[attack_id]"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_id in self.execution_threads:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "del self.execution_threads[attack_id]"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_campaign(self, campaign: attackcampaign) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a multi-step attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "step_result = self._execute_attack_step_sync(step)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if step.technique_id in ['t1078', 't1190']:  # valid accounts, exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step_sync(self, step: attackstep) -> attackresult:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step_sync(self, step: attackstep) -> attackresult:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_attack_step_sync(self, step: attackstep) -> attackresult:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute attack step synchronously\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = attackresult("
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=str(uuid.uuid4()),"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 297,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "status=attackstatus.running,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.completed if success else attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.completed if success else attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.artifacts = self._generate_attack_artifacts(step, target_host, success)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result.status = attackstatus.failed"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_technique(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute a specific attack technique\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'t1190': self._execute_exploit_public_app,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# vulnerability modifier - attacks succeed more against vulnerable hosts"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_command_line(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 387,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.debug(f\"executing command line attack on {target_host.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 395,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_valid_accounts(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.debug(f\"executing valid accounts attack on {target_host.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 406,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_exploit_public_app(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 406,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_exploit_public_app(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute exploit public-facing application (t1190)\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.debug(f\"executing public application exploit on {target_host.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 411,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "exploit_type = payload.get('exploit_type', 'web_app')"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 411,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "exploit_type = payload.get('exploit_type', 'web_app')"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 419,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_remote_services(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.debug(f\"executing remote services attack on {target_host.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_brute_force(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.debug(f\"executing brute force attack on {target_host.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 436,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_network_scan(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 443,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_file_discovery(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_system_info_discovery(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 457,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_credential_dumping(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 464,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_process_injection(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 471,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_indicator_removal(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 478,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_data_from_local_system(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 485,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_exfiltration_c2(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 492,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_data_encrypted_impact(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 499,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _execute_generic(self, step: attackstep, target_host: host) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 500,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute generic attack technique\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_attack_artifacts(self, step: attackstep, target_host: host, success: bool) -> dict[str"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_attack_artifacts(self, step: attackstep, target_host: host, success: bool) -> dict[str"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 507,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attack artifacts for forensics\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif step.technique_id == 't1190':  # exploit public app"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 529,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "artifacts['exploit_type'] = step.payload.get('exploit_type', 'web_app')"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 529,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "artifacts['exploit_type'] = step.payload.get('exploit_type', 'web_app')"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 530,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "artifacts['user_agent'] = 'mozilla/5.0 (attack tool)'"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 534,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_detection_events(self, step: attackstep, target_host: host) -> list[dict[str, any]]:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif step.technique_id == 't1190':  # exploit public app"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 572,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detection_type': 'web_attack',"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'request_uri': '/exploit/path',"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 592,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "high_severity = ['t1078', 't1190', 't1055', 't1003']  # valid accounts, exploit public app, etc."
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 603,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"load default attack templates\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 606,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'web_exploit': {"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 607,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'name': 'web application exploit',"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phase': 'exploitation',"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 611,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'exploit_type': 'sql_injection',"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 653,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.register_attack_template(name, template)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 656,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attacksimulator:"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 657,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"high-level attack simulation interface\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 661,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine = cyber_range.attack_engine"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 661,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine = cyber_range.attack_engine"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 665,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign: attackcampaign,"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 670,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute attack campaign with monitoring options\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 672,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"starting attack simulation: {campaign.name}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 682,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign_id = self.attack_engine.execute_campaign(campaign)"
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 687,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"start packet capture for attack analysis\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 692,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"configure attack logging\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_engine.py",
          "line": 693,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"configuring attack logging\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "core gan architecture for generating synthetic cyberattacks."
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack patterns across multiple vectors for defensive training purposes."
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvector:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a synthetic attack vector with metadata\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"gan generator for creating synthetic attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"gan discriminator for distinguishing real vs synthetic attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvectorizer:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"converts attack patterns to/from vector representations\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 105,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def fit(self, attack_data: list[str]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"build vocabulary from attack data\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attack_data:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 108,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attack_data:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "tokens = self._tokenize(attack)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def transform(self, attacks: union[str, list[str]]) -> torch.tensor:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"convert attacks to vector representation\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if isinstance(attacks, str):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = [attacks]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = [attacks]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "tokens = self._tokenize(attack)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"convert vectors back to attack strings\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = []"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(\" \".join(tokens))"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attacks"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"simple tokenization for attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackgan:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"main gan class for generating synthetic cyberattacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str] = none,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 166,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"initialized attackgan on device: {self.device}\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.vectorizer = attackvectorizer()"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attacks: union[str, list[str], path],"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"train the gan on real attack data\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 208,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if isinstance(real_attacks, (str, path)):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = self._load_attack_data(real_attacks)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = self._load_attack_data(real_attacks)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 209,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = self._load_attack_data(real_attacks)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = real_attacks"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = real_attacks"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 214,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.vectorizer.fit(attack_data)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = self.vectorizer.transform(attack_data)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 215,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = self.vectorizer.transform(attack_data)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 218,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "dataset = torch.utils.data.tensordataset(attack_vectors)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic attack vectors\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 259,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_samples} synthetic attacks\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 262,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks = []"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert to attack strings"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 277,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_strings = self.vectorizer.inverse_transform(fake_vectors.cpu())"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attackvector objects"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_str in attack_strings:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_str in attack_strings:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector = self._create_attack_vector(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector = self._create_attack_vector(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector = self._create_attack_vector(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 282,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack_vector, filter_detectable):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 282,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack_vector, filter_detectable):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 283,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack_vector)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 283,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack_vector)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 286,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return generated_attacks[:num_samples]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate diversity score for generated attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) < 2:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert attacks to vectors for comparison"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_strings = [attack.payload if isinstance(attack.payload, str) else str(attack.payload)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_strings = [attack.payload if isinstance(attack.payload, str) else str(attack.payload)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_strings = [attack.payload if isinstance(attack.payload, str) else str(attack.payload)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_strings = [attack.payload if isinstance(attack.payload, str) else str(attack.payload)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 296,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectors = self.vectorizer.transform(attack_strings)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "mask = ~torch.eye(len(attacks), dtype=bool)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_types': self.attack_types,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_types': self.attack_types,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "}, path / 'attack_gan_model.pth')"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 333,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "path = path(path) / 'attack_gan_model.pth'"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 388,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _load_attack_data(self, path: union[str, path]) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 389,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"load attack data from file or directory\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = []"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 395,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = f.readlines()"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data.extend(f.readlines())"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [line.strip() for line in attack_data if line.strip()]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = [line.strip() for line in attack_data if line.strip()]"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 404,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attack_data)} attack samples\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 404,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attack_data)} attack samples\")"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 405,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attack_data"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_vector(self, attack_str: str) -> attackvector:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_vector(self, attack_str: str) -> attackvector:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_vector(self, attack_str: str) -> attackvector:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create attackvector from generated string\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = self._classify_attack_type(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = self._classify_attack_type(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = self._classify_attack_type(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 411,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "techniques = self._extract_techniques(attack_str)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attackvector("
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 418,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload=attack_str,"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _classify_attack_type(self, attack_str: str) -> str:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _classify_attack_type(self, attack_str: str) -> str:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 426,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"classify attack type from string\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 427,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_str_lower = attack_str.lower()"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 427,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_str_lower = attack_str.lower()"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if any(keyword in attack_str_lower for keyword in ['malware', 'virus', 'trojan', 'ransomware']):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 431,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif any(keyword in attack_str_lower for keyword in ['sql', 'xss', 'csrf', 'injection']):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 433,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif any(keyword in attack_str_lower for keyword in ['phishing', 'social', 'email']):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 435,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif any(keyword in attack_str_lower for keyword in ['network', 'port', 'scan', 'ddos']):"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 438,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return np.random.choice(self.attack_types)"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _extract_techniques(self, attack_str: str) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"extract mitre att&ck techniques from attack string\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 444,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'scan' in attack_str.lower():"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 446,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'credential' in attack_str.lower():"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 448,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'lateral' in attack_str.lower():"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector, filter_detectable: bool = true) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector, filter_detectable: bool = true) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector, filter_detectable: bool = true) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 454,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate generated attack\"\"\""
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 456,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 10:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 456,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 10:"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 459,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# filter easily detectable attacks if requested"
        },
        {
          "file": "gan_cyber_range/core/attack_gan.py",
          "line": 460,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if filter_detectable and attack.stealth_level < 0.3:"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "network simulation, attack execution, and blue team training scenarios."
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_engine import attackengine, attacksimulator"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 67,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "active_attacks: int = 0"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine = attackengine(self)"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine = attackengine(self)"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_complete': [],"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# stop attack engine"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine.stop_all_attacks()"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_engine.stop_all_attacks()"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_config: dict[str, any]) -> str:"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_config: dict[str, any]) -> str:"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"execute an attack in the cyber range\"\"\""
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "raise runtimeerror(\"range must be running to execute attacks\")"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_engine.execute_attack(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_engine.execute_attack(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 246,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_engine.execute_attack(attack_config)"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 562,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks': ['malware_deployment', 'lateral_movement'],"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 568,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks': ['data_exfiltration', 'privilege_escalation'],"
        },
        {
          "file": "gan_cyber_range/core/cyber_range.py",
          "line": 562,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "'attacks': ['malware_deployment', 'lateral_movement'],"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvector:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a synthetic attack vector with metadata\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: optional[str] = none"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self.attack_id is none:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_id = str(uuid.uuid4())"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 41,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class minimalattackgenerator:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 42,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"minimal attack generator using rule-based generation instead of neural networks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, attack_types: list[str] = none):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_patterns = self._initialize_patterns()"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"initialize rule-based attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: optional[str] = none,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic attack vectors using rule-based approach\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_samples} attack vectors\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks = []"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# select attack type"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "selected_type = attack_type"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "selected_type = np.random.choice(self.attack_types)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "patterns = self.attack_patterns[selected_type]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack vector"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=selected_type,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"num_generated\": len(generated_attacks),"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"successfully generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"successfully generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return generated_attacks"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_payload(self, pattern: dict, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 179,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _get_techniques(self, attack_type: str, payload: str) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"map attack to mitre att&ck techniques\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"sql\": [\"t1190\"],             # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 194,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"xss\": [\"t1190\"],             # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"lfi\": [\"t1190\"]              # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type in technique_mapping:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for keyword, techniques in technique_mapping[attack_type].items():"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 217,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return defaults.get(attack_type, [\"t1001\"])"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _get_target_systems(self, attack_type: str) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 220,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get typical target systems for attack type\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return targets.get(attack_type, [\"generic_target\"])"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate generated attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 5:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 5:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.techniques:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 240,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not (0.0 <= attack.severity <= 1.0):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.severity = max(0.0, min(1.0, attack.severity))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.severity = max(0.0, min(1.0, attack.severity))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not (0.0 <= attack.stealth_level <= 1.0):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.stealth_level = max(0.0, min(1.0, attack.stealth_level))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.stealth_level = max(0.0, min(1.0, attack.stealth_level))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 248,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate diversity score based on attack types and payloads\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) < 2:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_diversity = len(unique_types) / len(self.attack_types)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "all_techniques.extend(attack.techniques)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 273,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 273,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 273,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 274,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"save generated attacks to file\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = {"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"generator\": \"minimalattackgenerator\","
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 283,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 283,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "json.dump(attack_data, f, indent=2)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"saved {len(attacks)} attacks to {path}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"saved {len(attacks)} attacks to {path}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def load_attacks(self, path: union[str, path]) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def load_attacks(self, path: union[str, path]) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"load attacks from file\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = []"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_dict in data.get(\"attacks\", []):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_dict in data.get(\"attacks\", []):"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 302,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attacks)} attacks from {path}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attacks)} attacks from {path}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 305,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attacks"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_generator = minimalattackgenerator()"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_generator = minimalattackgenerator()"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attacks using minimal generator\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_generator.generate(num_attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_generator.generate(num_attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 341,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"mock attack execution\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 353,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"event\": \"attack_executed\","
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len([e for e in self.event_log if e[\"event\"] == \"attack_executed\"]),"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len([e for e in self.event_log if e[\"event\"] == \"attack_executed\"]),"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 379,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator = minimalattackgenerator()"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 381,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=5)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 383,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 5:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 attacks, got {len(attacks)}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 attacks, got {len(attacks)}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 388,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 398,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attacks[0]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attacks[0]"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not result or \"attack_id\" not in result:"
        },
        {
          "file": "gan_cyber_range/core/minimal_gan.py",
          "line": 403,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(\"attack execution failed\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 132,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class minimalattackvector:"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 133,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"minimal attack vector for testing purposes\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, attack_type: str = \"test\", payload: str = \"harmless_test\"):"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_type = attack_type"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 136,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_type = attack_type"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 153,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate(self, num_samples: int = 1) -> list[minimalattackvector]:"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate minimal test attack vectors\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "minimalattackvector("
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test_attack\","
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=\"test_attack\","
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 174,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_log = []"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_vector: minimalattackvector):"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_vector: minimalattackvector):"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack_vector: minimalattackvector):"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"mock attack execution\"\"\""
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 185,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_log.append({"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack': attack_vector,"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack': attack_vector,"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"mock attack executed: {attack_vector.attack_type}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"mock attack executed: {attack_vector.attack_type}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"mock attack executed: {attack_vector.attack_type}\")"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len(self.attack_log),"
        },
        {
          "file": "gan_cyber_range/core/minimal_requirements.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len(self.attack_log),"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "exploit_difficulty: str  # \"low\", \"medium\", \"high\""
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "public_exploit: bool = false"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'exploit_difficulty': v.exploit_difficulty,"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'exploit_difficulty': v.exploit_difficulty,"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'public_exploit': v.public_exploit"
        },
        {
          "file": "gan_cyber_range/core/network_sim.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'public_exploit': v.public_exploit"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvector:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a synthetic attack vector with metadata\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 35,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: optional[str] = none"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self.attack_id is none:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_id = str(uuid.uuid4())"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"ultra-minimal attack generator using only python standard library\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, attack_types: list[str] = none):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = attack_types or [\"malware\", \"network\", \"web\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_patterns = self._initialize_patterns()"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"initialize rule-based attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: optional[str] = none,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic attack vectors using rule-based approach\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_samples} attack vectors\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks = []"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# select attack type"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type and attack_type in self.attack_patterns:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "selected_type = attack_type"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "selected_type = random.choice(self.attack_types)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "patterns = self.attack_patterns[selected_type]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack vector"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=selected_type,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 134,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 134,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self._is_valid_attack(attack):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 135,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generated_attacks.append(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 140,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"num_generated\": len(generated_attacks),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 141,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 141,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 141,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": list(set(a.attack_type for a in generated_attacks))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"successfully generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"successfully generated {len(generated_attacks)} valid attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return generated_attacks"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_payload(self, pattern: dict, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 232,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _get_techniques(self, attack_type: str, payload: str) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"map attack to mitre att&ck techniques\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 251,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"or\": [\"t1190\"],              # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 252,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"script\": [\"t1190\"],          # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"..\": [\"t1190\"],              # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"drop\": [\"t1190\"],            # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"jndi\": [\"t1190\"],            # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type in technique_mapping:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for keyword, techniques in technique_mapping[attack_type].items():"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# default techniques by attack type"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return defaults.get(attack_type, [\"t1001\"])"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _get_target_systems(self, attack_type: str) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get typical target systems for attack type\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return targets.get(attack_type, [\"generic_target\"])"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _is_valid_attack(self, attack: attackvector) -> bool:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate generated attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 3:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.payload or len(str(attack.payload)) < 3:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 297,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.techniques:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attack.target_systems:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 304,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not (0.0 <= attack.severity <= 1.0):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 307,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not (0.0 <= attack.stealth_level <= 1.0):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def diversity_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate diversity score based on attack types and payloads\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 314,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) < 2:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 318,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "unique_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_diversity = len(unique_types) / len(self.attack_types)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads = [str(attack.payload) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 328,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 328,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 329,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "all_techniques.extend(attack.techniques)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def save_attacks(self, attacks: list[attackvector], path: union[str, path]) -> none:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"save generated attacks to file\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_data = {"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks\": [asdict(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 353,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "json.dump(attack_data, f, indent=2)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"saved {len(attacks)} attacks to {path}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 355,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"saved {len(attacks)} attacks to {path}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 357,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def load_attacks(self, path: union[str, path]) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 357,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def load_attacks(self, path: union[str, path]) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"load attacks from file\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 364,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = []"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 365,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_dict in data.get(\"attacks\", []):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 365,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_dict in data.get(\"attacks\", []):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks.append(attackvector(**attack_dict))"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attacks)} attacks from {path}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(attacks)} attacks from {path}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 369,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attacks"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 378,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_generator = ultraminimalgenerator()"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks(self, num_attacks: int = 5) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 413,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attacks using ultra-minimal generator\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 414,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_generator.generate(num_attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 414,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.attack_generator.generate(num_attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def execute_attack(self, attack: attackvector) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"mock attack execution with realistic simulation\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success_probability = attack.stealth_level * 0.8 + 0.1"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_probability = (1.0 - attack.stealth_level) * 0.6 + 0.1"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 434,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"severity_impact\": attack.severity if success else 0.0,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"event\": \"attack_executed\","
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack.attack_id,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 442,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_events = [e for e in self.event_log if e[\"event\"] == \"attack_executed\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_events = [e for e in self.event_log if e[\"event\"] == \"attack_executed\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_events:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 454,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_count = sum(1 for e in attack_events if e[\"result\"][\"detected\"])"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 455,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = detected_count / len(attack_events)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 460,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_events:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 461,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success_count = sum(1 for e in attack_events if e[\"result\"][\"success\"])"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 462,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "success_rate = success_count / len(attack_events)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 478,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len(attack_events),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 478,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attacks_executed\": len(attack_events),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 490,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def get_attack_summary(self) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 491,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get summary of executed attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 492,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_events = [e for e in self.event_log if e[\"event\"] == \"attack_executed\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 492,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_events = [e for e in self.event_log if e[\"event\"] == \"attack_executed\"]"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 495,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attack_events),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 495,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"total_attacks\": len(attack_events),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 501,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for event in attack_events:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 502,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = event.get(\"attack_type\", \"unknown\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 502,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = event.get(\"attack_type\", \"unknown\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary[\"by_type\"][attack_type] = summary[\"by_type\"].get(attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary[\"by_type\"][attack_type] = summary[\"by_type\"].get(attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 572,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate synthetic attacks for training"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 573,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "synthetic_attacks = self.generator.generate(num_samples=8)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 576,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results = []"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in synthetic_attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in synthetic_attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 578,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 578,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = self.cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 579,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_results.append(result)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 594,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_summary = self.cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 594,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_summary = self.cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 597,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = self.generator.diversity_score(synthetic_attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"synthetic_attacks_generated\": len(synthetic_attacks),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"synthetic_attacks_generated\": len(synthetic_attacks),"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 609,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_diversity_score\": diversity,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 610,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_execution_results\": attack_results,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 610,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_execution_results\": attack_results,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 612,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_summary\": attack_summary,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 612,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_summary\": attack_summary,"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 623,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 625,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = generator.generate(num_samples=10)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 627,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) != 10:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 628,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 10 attacks, got {len(attacks)}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 628,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 10 attacks, got {len(attacks)}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 631,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2713 generated {len(attacks)} attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 631,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2713 generated {len(attacks)} attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 633,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test different attack types"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 634,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 634,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack_type in generator.attack_types:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 635,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 635,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 635,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_attacks = generator.generate(num_samples=2, attack_type=attack_type)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 636,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(type_attacks) != 2 or not all(a.attack_type == attack_type for a in type_attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 636,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(type_attacks) != 2 or not all(a.attack_type == attack_type for a in type_attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 636,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(type_attacks) != 2 or not all(a.attack_type == attack_type for a in type_attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 636,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(type_attacks) != 2 or not all(a.attack_type == attack_type for a in type_attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 637,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"failed to generate {attack_type} attacks correctly\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 637,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"failed to generate {attack_type} attacks correctly\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 640,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"\u2713 all attack types generated successfully\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 643,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity = generator.diversity_score(attacks)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 661,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack execution"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attacks = cyber_range.generate_attacks(num_attacks=5)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attacks = cyber_range.generate_attacks(num_attacks=5)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attacks = cyber_range.generate_attacks(num_attacks=5)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 664,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in test_attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 664,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in test_attacks:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 665,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 665,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "result = cyber_range.execute_attack(attack)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 667,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not result or \"attack_id\" not in result:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 668,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(\"attack execution failed\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 671,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"\u2713 executed {len(results)} attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 675,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not metrics or \"attacks_executed\" not in metrics:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 679,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if metrics[\"attacks_executed\"] != 5:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 680,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 executed attacks, got {metrics['attacks_executed']}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 680,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 executed attacks, got {metrics['attacks_executed']}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 685,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack summary"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 686,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "summary = cyber_range.get_attack_summary()"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 687,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if summary[\"total_attacks\"] != 5:"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 688,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 total attacks in summary, got {summary['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 688,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(f\"expected 5 total attacks in summary, got {summary['total_attacks']}\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 691,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"\u2713 attack summary generated\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 694,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "temp_file = path(\"/tmp/test_attacks.json\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 695,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, temp_file)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 695,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "generator.save_attacks(attacks, temp_file)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 698,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(\"failed to save attacks\")"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 701,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(temp_file)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 701,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "loaded_attacks = generator.load_attacks(temp_file)"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 702,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) != len(attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 702,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(loaded_attacks) != len(attacks):"
        },
        {
          "file": "gan_cyber_range/core/ultra_minimal.py",
          "line": 703,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.error(\"failed to load attacks correctly\")"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaigns: mapped[list[\"attackcampaign\"]] = relationship(\"attackcampaign\", back_populates=\"creator\")"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaigns: mapped[list[\"attackcampaign\"]] = relationship(\"attackcampaign\", back_populates=\"creator\")"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates="
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates="
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates="
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack metrics"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 177,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "active_attacks: mapped[int] = mapped_column(integer, default=0)"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "successful_attacks: mapped[int] = mapped_column(integer, default=0)"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 179,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "blocked_attacks: mapped[int] = mapped_column(integer, default=0)"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 198,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack generation models"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 199,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvector(base):"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 200,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generated attack vector model\"\"\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "__tablename__ = \"attack_vectors\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: mapped[str] = mapped_column(string(50), nullable=false, index=true)"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 206,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack details"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates=\"attack"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates=\"attack"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 228,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates=\"attack"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "index('idx_attack_type', 'attack_type'),"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "index('idx_attack_type', 'attack_type'),"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 232,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "index('idx_attack_created', 'created_at'),"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 233,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "index('idx_attack_confidence', 'confidence'),"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackcampaign(base):"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 238,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"red team attack campaign model\"\"\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "__tablename__ = \"attack_campaigns\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates=\"campai"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "executions: mapped[list[\"attackexecution\"]] = relationship(\"attackexecution\", back_populates=\"campai"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackexecution(base):"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack execution tracking\"\"\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "__tablename__ = \"attack_executions\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 287,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector_id: mapped[optional[uuid.uuid]] = mapped_column(guid(), foreignkey(\"attack_vectors.id\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 287,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector_id: mapped[optional[uuid.uuid]] = mapped_column(guid(), foreignkey(\"attack_vectors.id\""
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign_id: mapped[optional[uuid.uuid]] = mapped_column(guid(), foreignkey(\"attack_campaigns.id\"))"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 311,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cyber_range: mapped[\"cyberrange\"] = relationship(\"cyberrange\", back_populates=\"attack_executions\")"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector: mapped[optional[\"attackvector\"]] = relationship(\"attackvector\", back_populates=\"execu"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector: mapped[optional[\"attackvector\"]] = relationship(\"attackvector\", back_populates=\"execu"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector: mapped[optional[\"attackvector\"]] = relationship(\"attackvector\", back_populates=\"execu"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign: mapped[optional[\"attackcampaign\"]] = relationship(\"attackcampaign\", back_populates=\"execut"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 313,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign: mapped[optional[\"attackcampaign\"]] = relationship(\"attackcampaign\", back_populates=\"execut"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns: mapped[optional[list[dict[str, any]]]] = mapped_column(json)"
        },
        {
          "file": "gan_cyber_range/db/models.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scoring_model: mapped[str] = mapped_column(string(50), default=\"mitre_attack\")"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 15,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector, attackcampaign, attackexecution,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 15,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector, attackcampaign, attackexecution,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 15,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector, attackcampaign, attackexecution,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 362,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackvectorrepository(baserepository):"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 363,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack vector repository\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "super().__init__(session, attackvector)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def create_attack_vector(self, attack_type: str, techniques: list[str],"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def create_attack_vector(self, attack_type: str, techniques: list[str],"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 371,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "created_by: uuid.uuid, **kwargs) -> attackvector:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 372,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a new attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack = attackvector("
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 383,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.session.add(attack)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attack"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 387,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_by_type(self, attack_type: str, limit: int = 100) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 387,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_by_type(self, attack_type: str, limit: int = 100) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 388,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get attack vectors by type\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackvector)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.attack_type == attack_type)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.attack_type == attack_type)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.attack_type == attack_type)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 392,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(desc(attackvector.confidence))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_high_confidence_attacks(self, min_confidence: float = 0.8) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_high_confidence_attacks(self, min_confidence: float = 0.8) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 398,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get high confidence attack vectors\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 400,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackvector)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 401,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.confidence >= min_confidence)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 402,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(desc(attackvector.confidence))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 406,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def increment_usage(self, attack_id: uuid.uuid) -> none:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"increment usage counter for attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "update(attackvector)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.id == attack_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 410,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackvector.id == attack_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "used_count=attackvector.used_count + 1,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def search_attacks(self, query: str, attack_types: list[str] = none) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def search_attacks(self, query: str, attack_types: list[str] = none) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 417,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def search_attacks(self, query: str, attack_types: list[str] = none) -> list[attackvector]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 418,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"search attack vectors\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_types:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 422,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "conditions.append(attackvector.attack_type.in_(attack_types))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 422,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "conditions.append(attackvector.attack_type.in_(attack_types))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 422,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "conditions.append(attackvector.attack_type.in_(attack_types))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 427,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "func.json_extract(attackvector.techniques, '$').like(f'%{query}%'),"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 428,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackvector.payload.ilike(f'%{query}%')"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 433,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackvector)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 435,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(desc(attackvector.confidence))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackcampaignrepository(baserepository):"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack campaign repository\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 444,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "super().__init__(session, attackcampaign)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 449,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "created_by: uuid.uuid, **kwargs) -> attackcampaign:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 450,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a new attack campaign\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 451,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "campaign = attackcampaign("
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 465,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_user_campaigns(self, user_id: uuid.uuid) -> list[attackcampaign]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 468,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackcampaign)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 469,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackcampaign.created_by == user_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 470,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(desc(attackcampaign.created_at))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 474,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_active_campaigns(self) -> list[attackcampaign]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 477,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackcampaign)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 478,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackcampaign.status == \"active\")"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 479,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(attackcampaign.created_at)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 484,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackexecutionrepository(baserepository):"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 485,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack execution repository\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 488,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "super().__init__(session, attackexecution)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 491,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector_id: uuid.uuid = none,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 493,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "**kwargs) -> attackexecution:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 494,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a new attack execution\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 495,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "execution = attackexecution("
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 497,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector_id=attack_vector_id,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 497,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector_id=attack_vector_id,"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def get_range_executions(self, cyber_range_id: uuid.uuid) -> list[attackexecution]:"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 509,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "select(attackexecution)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 510,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackexecution.cyber_range_id == cyber_range_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 511,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".order_by(desc(attackexecution.started_at))"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 530,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "update(attackexecution)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 531,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ".where(attackexecution.id == execution_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 537,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate attack success rate\"\"\""
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 539,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackexecution.started_at >= datetime.utcnow() - timedelta(hours=time_period_hours),"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 540,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackexecution.status.in_([\"successful\", \"failed\", \"blocked\"])"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 544,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "conditions.append(attackexecution.cyber_range_id == cyber_range_id)"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 548,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "func.count(attackexecution.id).label(\"total\"),"
        },
        {
          "file": "gan_cyber_range/db/repositories.py",
          "line": 549,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "func.sum(func.case((attackexecution.success == true, 1), else_=0)).label(\"successful\")"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"comprehensive understanding of how ai is used in modern cyber attacks\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 160,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "objective_id=\"gan_attack_detection\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "title=\"gan-generated attack detection\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"identify and analyze attacks generated by generative adversarial networks\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "title=\"adaptive defense against ai attacks\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "prerequisites=[\"gan_attack_detection\"],"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "prerequisites=[\"gan_attack_detection\"],"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"question\": \"what are the key characteristics that distinguish ai-generated attacks from traditional"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 236,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"question\": \"what are the key characteristics that distinguish ai-generated attacks from traditional"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "title=\"hands-on: gan attack detection laboratory\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"practical laboratory exercise for detecting gan-generated attack patterns\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "objectives=[\"gan_attack_detection\"],"
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"gan_attack_detection\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 381,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"gan_attack_detection\","
        },
        {
          "file": "gan_cyber_range/education/curriculum_manager.py",
          "line": 451,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"gan_attack_detection\": experience_factor * 0.2,"
        },
        {
          "file": "gan_cyber_range/evaluation/__init__.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- attack quality assessment"
        },
        {
          "file": "gan_cyber_range/evaluation/__init__.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_evaluator import attackqualityevaluator, realismscorer, diversityscorer, sophistication"
        },
        {
          "file": "gan_cyber_range/evaluation/__init__.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_evaluator import attackqualityevaluator, realismscorer, diversityscorer, sophistication"
        },
        {
          "file": "gan_cyber_range/evaluation/__init__.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attackqualityevaluator',"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack quality evaluation and metrics for gan-generated attacks."
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack quality evaluation and metrics for gan-generated attacks."
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module provides comprehensive evaluation of synthetic attack quality,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 18,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackvector"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 18,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackvector"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack quality evaluation report\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 32,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "num_attacks_evaluated: int"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates how realistic generated attacks are compared to real attack data\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates how realistic generated attacks are compared to real attack data\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 40,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, reference_dataset: str = \"mitre_attack\"):"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 44,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.reference_attacks = []"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# load reference attack patterns"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate realism score for attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 53,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self._fallback_realism_score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert attacks to text representations"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 58,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# vectorize generated attacks"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = self.vectorizer.transform(attack_texts)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors = self.vectorizer.transform(attack_texts)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# calculate similarity to reference attacks"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "similarities = cosine_similarity(attack_vectors, self.reference_vectors)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# score is average maximum similarity for each generated attack"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 72,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"load reference attack data\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "reference_attacks = ["
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.reference_attacks = reference_attacks"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.reference_attacks = reference_attacks"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.reference_vectors = self.vectorizer.fit_transform(reference_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(reference_attacks)} reference attack patterns\")"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"loaded {len(reference_attacks)} reference attack patterns\")"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 98,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"convert attack vector to text representation\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "str(attack.payload) if isinstance(attack.payload, str) else \"\","
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 101,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "str(attack.payload) if isinstance(attack.payload, str) else \"\","
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\" \".join(attack.techniques),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\" \".join(attack.target_systems)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _fallback_realism_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _fallback_realism_score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.techniques and any(t.startswith('t') for t in attack.techniques):"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.techniques and any(t.startswith('t') for t in attack.techniques):"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# bonus for realistic attack types"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.attack_type in realistic_types:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.attack_type in realistic_types:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 0.1 <= attack.severity <= 1.0 and 0.1 <= attack.stealth_level <= 1.0:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 0.1 <= attack.severity <= 1.0 and 0.1 <= attack.stealth_level <= 1.0:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.stealth_level > 0.8 and attack.severity > 0.9:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.stealth_level > 0.8 and attack.severity > 0.9:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates diversity of generated attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate diversity score for attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 146,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if len(attacks) < 2:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self._embedding_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self._categorical_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 154,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self._combined_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _embedding_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 156,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _embedding_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 158,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert attacks to text"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 159,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_texts = [self._attack_to_text(attack) for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# vectorize attacks"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "vectors = self.vectorizer.fit_transform(attack_texts)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 169,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "n = len(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 179,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self._categorical_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 181,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _categorical_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 181,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _categorical_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = set(attack.attack_type for attack in attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "techniques.update(attack.techniques)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 189,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 190,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_systems.update(attack.target_systems)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_diversity = len(attack_types) / max(1, len(attacks))"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_diversity = len(attack_types) / max(1, len(attacks))"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 194,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_diversity = len(techniques) / max(1, len(attacks) * 3)  # assume max 3 techniques per atta"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 194,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_diversity = len(techniques) / max(1, len(attacks) * 3)  # assume max 3 techniques per atta"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_diversity = len(target_systems) / max(1, len(attacks) * 2)  # assume max 2 targets per attack"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_diversity = len(target_systems) / max(1, len(attacks) * 2)  # assume max 2 targets per attack"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _combined_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _combined_diversity(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "embedding_div = self._embedding_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "categorical_div = self._categorical_diversity(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 207,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _attack_to_text(self, attack: attackvector) -> str:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 208,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"convert attack vector to text representation\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack.attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "str(attack.payload) if isinstance(attack.payload, str) else \"\","
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 211,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "str(attack.payload) if isinstance(attack.payload, str) else \"\","
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 212,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\" \".join(attack.techniques),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 213,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\" \".join(attack.target_systems)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates sophistication level of generated attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 224,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# sophistication weights for different attack characteristics"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 232,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'t1190': 0.6,  # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 238,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate sophistication score for attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 243,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 244,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 249,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"score sophistication of a single attack\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 256,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for technique in attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_score /= len(attack.techniques)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 261,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "multi_technique_bonus = min(0.2, len(attack.techniques) * 0.05)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 264,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_contribution = attack.stealth_level * 0.3"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 266,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# severity contribution (sophisticated attacks often have high impact)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 267,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severity_contribution = attack.severity * 0.2"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 270,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload_complexity = self._assess_payload_complexity(attack.payload)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"assess complexity of attack payload\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates how detectable generated attacks are\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 301,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'t1190': 0.6,  # web exploits - moderately detectable"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 310,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 312,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 317,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 323,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"score detectability of a single attack\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 328,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 329,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for technique in attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 331,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_detection /= len(attack.techniques)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_modifier = 1.0 - (attack.stealth_level * 0.4)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# high severity attacks are often more detectable"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severity_modifier = 1.0 + (attack.severity * 0.2)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 342,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "multi_technique_penalty = min(0.2, len(attack.techniques) * 0.03)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 351,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"evaluates potential impact of generated attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# impact weights by attack type"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 367,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 367,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def score(self, attacks: list[attackvector]) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate impact score for attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 369,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "score = self._score_single_attack(attack)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 379,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 379,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 379,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _score_single_attack(self, attack: attackvector) -> float:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 380,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"score impact of a single attack\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 381,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# base impact from attack type"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 382,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "base_impact = self.impact_weights.get(attack.attack_type, 0.5)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 382,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "base_impact = self.impact_weights.get(attack.attack_type, 0.5)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 385,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severity_impact = attack.severity"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 390,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 391,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for technique in attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'database' in attack.target_systems or 'financial' in attack.target_systems:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if 'database' in attack.target_systems or 'financial' in attack.target_systems:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 404,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackqualityevaluator:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 405,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"main attack quality evaluator\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks: list[attackvector],"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 416,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks: list[attackvector],"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 419,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"comprehensive evaluation of attack quality\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "num_attacks_evaluated=0,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 434,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"evaluating {len(attacks)} attacks\")"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 434,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"evaluating {len(attacks)} attacks\")"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 437,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "realism_score = self.realism_scorer.score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 438,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "diversity_score = self.diversity_scorer.score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 439,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sophistication_score = self.sophistication_scorer.score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 440,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detectability_score = self.detectability_scorer.score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 441,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "impact_score = self.impact_scorer.score(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 463,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type_distribution': self._analyze_attack_types(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 463,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type_distribution': self._analyze_attack_types(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 463,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type_distribution': self._analyze_attack_types(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 464,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'technique_distribution': self._analyze_techniques(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 465,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'severity_statistics': self._analyze_severity(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 466,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'stealth_statistics': self._analyze_stealth(attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 476,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "num_attacks_evaluated=len(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 476,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "num_attacks_evaluated=len(attacks),"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 481,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"attack evaluation completed - overall score: {overall_score:.3f}\")"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 503,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'num_attacks_evaluated': quality_report.num_attacks_evaluated,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 503,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'num_attacks_evaluated': quality_report.num_attacks_evaluated,"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 524,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_attack_types(self, attacks: list[attackvector]) -> dict[str, int]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 524,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_attack_types(self, attacks: list[attackvector]) -> dict[str, int]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 524,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_attack_types(self, attacks: list[attackvector]) -> dict[str, int]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 525,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"analyze distribution of attack types\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 527,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 527,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_counts[attack.attack_type] = type_counts.get(attack.attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_counts[attack.attack_type] = type_counts.get(attack.attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_counts[attack.attack_type] = type_counts.get(attack.attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "type_counts[attack.attack_type] = type_counts.get(attack.attack_type, 0) + 1"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 531,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_techniques(self, attacks: list[attackvector]) -> dict[str, int]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 531,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_techniques(self, attacks: list[attackvector]) -> dict[str, int]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 534,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 534,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for attack in attacks:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 535,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for technique in attack.techniques:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 539,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_severity(self, attacks: list[attackvector]) -> dict[str, float]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 539,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_severity(self, attacks: list[attackvector]) -> dict[str, float]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severities = [attack.severity for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severities = [attack.severity for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severities = [attack.severity for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 549,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_stealth(self, attacks: list[attackvector]) -> dict[str, float]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 549,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _analyze_stealth(self, attacks: list[attackvector]) -> dict[str, float]:"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_levels = [attack.stealth_level for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_levels = [attack.stealth_level for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 551,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "stealth_levels = [attack.stealth_level for attack in attacks]"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 563,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\\\\title{{attack quality evaluation report}}"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 586,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\\\\caption{{attack quality component scores}}"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 590,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "number of attacks evaluated: {quality_report.num_attacks_evaluated}"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 590,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "number of attacks evaluated: {quality_report.num_attacks_evaluated}"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 596,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return f\"\"\"attack quality evaluation report"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 598,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks evaluated: {quality_report.num_attacks_evaluated}"
        },
        {
          "file": "gan_cyber_range/evaluation/attack_evaluator.py",
          "line": 598,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks evaluated: {quality_report.num_attacks_evaluated}"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: optional[str]"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def process_attack_event(self, attack_event: dict[str, any]) -> list[detectionevent]:"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def process_attack_event(self, attack_event: dict[str, any]) -> list[detectionevent]:"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"process an attack event and generate detection results\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection = self._simulate_tool_detection(tool_type, attack_event)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 172,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_intensity: str = \"medium\","
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 173,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "scoring_model: str = \"mitre_attack\""
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "evaluation_results = self._run_evaluation_period(duration_hours, attack_intensity)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 242,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 316,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.process_attack_event(event_data)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _simulate_tool_detection(self, tool_type: str, attack_event: dict[str, any]) -> optional[detecti"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# determine if tool detects the attack"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 328,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detects_attack = np.random.random() < tool_config['detection_rate']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 330,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if detects_attack or np.random.random() < tool_config['false_positive_rate']:"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_event.get('attack_id'),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_event.get('attack_id'),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 336,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_event.get('attack_id'),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 337,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_id=attack_event.get('technique_id'),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 338,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severity=attack_event.get('severity', 'medium'),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "confidence=np.random.uniform(0.6, 0.95) if detects_attack else np.random.uniform(0.3, 0.7),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 340,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "true_positive=detects_attack,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 360,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"run evaluation period with simulated attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 362,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack intensity configuration"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 364,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'low': {'attacks_per_hour': 2, 'complexity_modifier': 0.7},"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 365,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'medium': {'attacks_per_hour': 5, 'complexity_modifier': 1.0},"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'high': {'attacks_per_hour': 10, 'complexity_modifier': 1.3}"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 370,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = int(duration_hours * config['attacks_per_hour'])"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 370,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = int(duration_hours * config['attacks_per_hour'])"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 373,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'total_attacks': total_attacks,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 374,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'detected_attacks': 0,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 381,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attacks and detection"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 382,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i in range(total_attacks):"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 383,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_event = self._generate_simulated_attack(config['complexity_modifier'])"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 383,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_event = self._generate_simulated_attack(config['complexity_modifier'])"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detections = self.process_attack_event(attack_event)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detections = self.process_attack_event(attack_event)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 388,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "results['detected_attacks'] += 1"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 404,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_simulated_attack(self, complexity_modifier: float) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 405,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate a simulated attack for evaluation\"\"\""
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 407,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = ['malware', 'phishing', 'lateral_movement', 'data_exfiltration', 'privilege_escalatio"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': f\"sim_attack_{np.random.randint(100000, 999999)}\","
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 412,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': f\"sim_attack_{np.random.randint(100000, 999999)}\","
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 413,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type': np.random.choice(attack_types),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 413,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type': np.random.choice(attack_types),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 424,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = evaluation_results['total_attacks']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 424,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_attacks = evaluation_results['total_attacks']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = evaluation_results['detected_attacks']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 425,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detected_attacks = evaluation_results['detected_attacks']"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = detected_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 429,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_rate = detected_attacks / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_negative_rate = (total_attacks - detected_attacks) / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_negative_rate = (total_attacks - detected_attacks) / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 430,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_negative_rate = (total_attacks - detected_attacks) / max(1, total_attacks)"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_positive_rate=false_positives / max(1, detected_attacks + false_positives),"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 464,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_events_processed=total_attacks + false_positives,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 465,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "true_positives=detected_attacks,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 467,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_negatives=total_attacks - detected_attacks,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 467,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "false_negatives=total_attacks - detected_attacks,"
        },
        {
          "file": "gan_cyber_range/evaluation/blue_team_evaluator.py",
          "line": 647,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'expected_improvement': 'improved attack coverage and visibility'"
        },
        {
          "file": "gan_cyber_range/evaluation/training_evaluator.py",
          "line": 415,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'practice with diverse attack scenarios',"
        },
        {
          "file": "gan_cyber_range/factories/__init__.py",
          "line": 8,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_factory import attackfactory"
        },
        {
          "file": "gan_cyber_range/factories/__init__.py",
          "line": 8,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .attack_factory import attackfactory"
        },
        {
          "file": "gan_cyber_range/factories/__init__.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackfactory\","
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack factory for creating and configuring attack components."
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack factory for creating and configuring attack components."
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan, generator, discriminator"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan, generator, discriminator"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_engine import attacksimulator, attackengine"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_engine import attacksimulator, attackengine"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 11,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_engine import attacksimulator, attackengine"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 20,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackconfig:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"configuration for attack components\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str] = none"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 27,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "max_attack_complexity: float = 0.8"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 33,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if self.attack_types is none:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_types = [\"network\", \"web\", \"malware\", \"social_engineering\"]"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackfactory:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"factory for creating and configuring attack-related components\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 42,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self._gan_cache: dict[str, attackgan] = {}"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_attack_gan(self, config: optional[attackconfig] = none) -> attackgan:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_attack_gan(self, config: optional[attackconfig] = none) -> attackgan:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 45,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_attack_gan(self, config: optional[attackconfig] = none) -> attackgan:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 46,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a configured attackgan instance\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 47,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config = config or attackconfig()"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not self.security_manager.validate_use_case(\"research\", \"attack_generation\"):"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "raise cyberrangeerror(\"attack gan creation not authorized for current use case\")"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"returning cached attackgan instance: {cache_key}\")"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 60,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"creating new attackgan with architecture: {config.gan_architecture}\")"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 62,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = attackgan("
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=config.attack_types,"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 66,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types=config.attack_types,"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 79,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_red_team_llm(self, config: optional[attackconfig] = none) -> redteamllm:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config = config or attackconfig()"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cache_key = f\"llm_{config.llm_model}_{config.max_attack_complexity}\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "creativity=min(config.max_attack_complexity, 0.8),"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_attack_simulator(self,"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 110,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan: optional[attackgan] = none,"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config: optional[attackconfig] = none) -> attacksimulator:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config: optional[attackconfig] = none) -> attacksimulator:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 113,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a complete attack simulation environment\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config = config or attackconfig()"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan = self.create_attack_gan(config)"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack engine"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "engine = attackengine()"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "simulator = attacksimulator("
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_gan=gan,"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_engine=engine"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 145,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"reconnaissance\", \"lateral_movement\", \"data_exfiltration\"],"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 151,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"malware\", \"encryption\", \"payment_demand\"],"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"privilege_escalation\", \"data_access\", \"exfiltration\"],"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"zero_day_exploit\": {"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"vulnerability_research\", \"exploit_development\", \"deployment\"],"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 163,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_types\": [\"vulnerability_research\", \"exploit_development\", \"deployment\"],"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _apply_security_wrapper(self, gan: attackgan) -> attackgan:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 186,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _apply_security_wrapper(self, gan: attackgan) -> attackgan:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"apply security constraints to attackgan\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 193,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.security_manager.log_activity(\"attack_generation\", {"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 210,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _apply_llm_constraints(self, llm: redteamllm, config: attackconfig) -> redteamllm:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 222,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "llm.creativity = min(llm.creativity, config.max_attack_complexity)"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _apply_simulation_monitoring(self, simulator: attacksimulator) -> attacksimulator:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _apply_simulation_monitoring(self, simulator: attacksimulator) -> attacksimulator:"
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 227,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"apply monitoring to attack simulation\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/attack_factory.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"attack factory cache cleared\")"
        },
        {
          "file": "gan_cyber_range/factories/network_factory.py",
          "line": 229,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def create_attack_scenario_topology(self,"
        },
        {
          "file": "gan_cyber_range/factories/network_factory.py",
          "line": 232,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create topology optimized for specific attack scenarios\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/network_factory.py",
          "line": 620,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"apply enhancements for specific attack scenarios\"\"\""
        },
        {
          "file": "gan_cyber_range/factories/network_factory.py",
          "line": 632,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# group vulnerabilities for realistic attack paths"
        },
        {
          "file": "gan_cyber_range/factories/range_factory.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"identify basic attack patterns\","
        },
        {
          "file": "gan_cyber_range/factories/range_factory.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"novel attack technique analysis\","
        },
        {
          "file": "gan_cyber_range/factories/range_factory.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"exploit development\","
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 12,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 12,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..core.attack_gan import attackgan"
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"identify potential attack vectors\""
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, cyber_range_factory=none, attack_factory=none):"
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attack_factory"
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attack_factory"
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"description\": \"multi-stage apt attack simulation\","
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 608,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_sophistication\": \"advanced\","
        },
        {
          "file": "gan_cyber_range/factories/training_factory.py",
          "line": 612,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_speed\": \"rapid\","
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan-based attack generators for creating synthetic attack patterns."
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan-based attack generators for creating synthetic attack patterns."
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module provides specialized generators for different attack types including"
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "malware, network attacks, web exploits, and social engineering campaigns."
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "malware, network attacks, web exploits, and social engineering campaigns."
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 9,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .network_gan import networkattackgan"
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .web_attack_gan import webattackgan"
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 10,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .web_attack_gan import webattackgan"
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 15,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'networkattackgan',"
        },
        {
          "file": "gan_cyber_range/generators/__init__.py",
          "line": 16,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'webattackgan',"
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "line": 421,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'worm': ['network_spread', 'self_replication', 'vulnerability_exploitation', 'payload_delivery']"
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "line": 270,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "malware_types = ['trojan', 'ransomware', 'backdoor', 'worm']"
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "line": 420,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "'backdoor': ['remote_access', 'privilege_escalation', 'persistence', 'command_execution'],"
        },
        {
          "file": "gan_cyber_range/generators/malware_gan.py",
          "line": 502,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "'backdoor': ['persistence_mechanism', 'command_channel'],"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan-based network attack pattern generation."
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module generates realistic network attack patterns including port scans,"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ddos attacks, lateral movement, and network reconnaissance activities."
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 22,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class networkattackpattern:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a network attack pattern\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 25,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 38,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a network flow in an attack\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 51,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class networkattackgenerator(nn.module):"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"gan generator for network attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# separate heads for different attack components"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 95,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate network attack features\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class networkattackdiscriminator(nn.module):"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 112,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"discriminator for network attack gan\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 134,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"classify network attack patterns as real or synthetic\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 147,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class networkattackgan:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 148,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"complete gan system for network attack generation\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 164,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.generator = networkattackgenerator(noise_dim=noise_dim).to(self.device)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 165,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.discriminator = networkattackdiscriminator().to(self.device)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_diversity': []"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"initialized networkattackgan on device: {self.device}\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 191,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attack_data: dict[str, torch.tensor],"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 195,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"train the network attack gan\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 197,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"starting network attack gan training for {epochs} epochs\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 201,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attack_data['ip_features'],"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 202,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attack_data['port_features'],"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attack_data['timing_features'],"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 204,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "real_attack_data['behavior_features']"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 247,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"network attack gan training completed\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 250,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack_patterns("
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 253,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str] = none"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 254,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> list[networkattackpattern]:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic network attack patterns\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 257,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_types is none:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 258,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = ['port_scan', 'ddos', 'lateral_movement', 'reconnaissance']"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 260,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_patterns} network attack patterns\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 276,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert to attack patterns"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 278,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "pattern = self._create_attack_pattern("
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 280,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 284,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(patterns)} network attack patterns\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_pattern: networkattackpattern,"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 289,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_pattern: networkattackpattern,"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 292,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate detailed network flows for an attack pattern\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_flows} network flows for {attack_pattern.attack_type}\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_flows} network flows for {attack_pattern.attack_type}\")"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 299,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "flow = self._create_network_flow(attack_pattern, i)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 363,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_pattern("
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 366,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str]"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 367,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> networkattackpattern:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 368,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create networkattackpattern from generated features\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 376,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# determine attack type"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = random.choice(attack_types)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 377,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = random.choice(attack_types)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 383,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate ports based on features and attack type"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 384,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ports = self._generate_ports_from_features(port_feat, attack_type)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 387,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "protocols = self._determine_protocols(attack_type, behavior_feat)"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 397,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return networkattackpattern("
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 398,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "pattern_id=f\"netattack_{random.randint(100000, 999999)}\","
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 399,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 420,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# external/attacker ips"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 435,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_ports_from_features(self, features: np.ndarray, attack_type: str) -> list[int]:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 438,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# common ports by attack type"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 446,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "base_ports = common_ports.get(attack_type, [80, 443, 22])"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 459,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _determine_protocols(self, attack_type: str, behavior_features: np.ndarray) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 460,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"determine protocols used in attack\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 469,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "base_protocols = protocol_prefs.get(attack_type, ['tcp'])"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 480,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"determine attack sophistication level\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 491,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_network_flow(self, pattern: networkattackpattern, flow_index: int) -> networkflow:"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 492,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create a detailed network flow for an attack pattern\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate flow characteristics based on attack type"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 506,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if pattern.attack_type == 'port_scan':"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 512,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif pattern.attack_type == 'ddos':"
        },
        {
          "file": "gan_cyber_range/generators/network_gan.py",
          "line": 518,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif pattern.attack_type == 'lateral_movement':"
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan-based social engineering attack generation."
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "social media manipulation, and human-targeted attack scenarios for security awareness training."
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 57,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors: list[str]"
        },
        {
          "file": "gan_cyber_range/generators/social_gan.py",
          "line": 419,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vectors=['email'],"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "gan-based web attack generation for security training."
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module generates realistic web attack patterns including sql injection,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 23,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class webattackpayload:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 24,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a web attack payload\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 36,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class webattacksession:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 37,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"represents a complete web attack session\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 40,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payloads: list[webattackpayload]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 43,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector: str"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 48,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class webattackgenerator(nn.module):"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 49,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"gan generator for web attack payloads\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack type classifier head"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_type_head = nn.linear(hidden_dim, 8)  # number of attack types"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_type_head = nn.linear(hidden_dim, 8)  # number of attack types"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate web attack payload sequences\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 138,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attack metadata from final hidden state"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type_logits = self.attack_type_head(hidden[0][-1])"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type_logits = self.attack_type_head(hidden[0][-1])"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type_logits': attack_type_logits,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 144,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_type_logits': attack_type_logits,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 149,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class webattackdiscriminator(nn.module):"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 150,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"discriminator for web attack gan\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 202,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class webattackgan:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"complete gan system for web attack generation\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.vocab = self._build_web_attack_vocab()"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 226,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.generator = webattackgenerator("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.discriminator = webattackdiscriminator("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 255,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"initialized webattackgan on device: {self.device}\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 263,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"train the web attack gan\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 265,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"starting web attack gan training for {epochs} epochs\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 319,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"web attack gan training completed\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 322,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_web_attacks("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 324,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "num_attacks: int = 100,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 325,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str] = none"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 326,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> list[webattacksession]:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 327,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate synthetic web attack sessions\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 329,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_types is none:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 330,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types = ['sql_injection', 'xss', 'csrf', 'lfi', 'rfi', 'xxe', 'ssrf', 'cmd_injection']"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_attacks} web attack sessions\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 332,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating {num_attacks} web attack sessions\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 335,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_sessions = []"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 339,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for i in range(0, num_attacks, batch_size):"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 340,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "current_batch_size = min(batch_size, num_attacks - i)"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 345,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attack features"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# convert to attack sessions"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 350,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "session = self._create_attack_session("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 352,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "outputs['attack_type_logits'][j],"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 354,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 356,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_sessions.append(session)"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(attack_sessions)} web attack sessions\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 358,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(attack_sessions)} web attack sessions\")"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 359,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attack_sessions"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _build_web_attack_vocab(self) -> list[str]:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 409,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"build vocabulary for web attack payloads\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 523,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _create_attack_session("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 526,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type_logits: torch.tensor,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_types: list[str]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 529,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": ") -> webattacksession:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 530,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"create webattacksession from generated features\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 536,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# determine attack type"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 537,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type_idx = torch.argmax(attack_type_logits).item()"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 537,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type_idx = torch.argmax(attack_type_logits).item()"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 538,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_types[attack_type_idx % len(attack_types)]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 538,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_types[attack_type_idx % len(attack_types)]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 538,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_types[attack_type_idx % len(attack_types)]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 538,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_types[attack_type_idx % len(attack_types)]"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload = webattackpayload("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 552,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 552,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 554,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_parameter=self._select_target_parameter(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 555,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "http_method=self._select_http_method(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 562,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "session = webattacksession("
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 564,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 564,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type=attack_type,"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 566,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_url=self._generate_target_url(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 568,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector=self._determine_attack_vector(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 568,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector=self._determine_attack_vector(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 568,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector=self._determine_attack_vector(attack_type),"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 575,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _select_target_parameter(self, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 576,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"select appropriate target parameter for attack type\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 586,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "param_list = parameters.get(attack_type, ['param'])"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 589,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _select_http_method(self, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 590,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"select http method for attack type\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 600,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return method_prefs.get(attack_type, 'get')"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 624,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_target_url(self, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 638,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "path_list = paths.get(attack_type, ['/index.php'])"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 656,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return user_agents.get(sophistication_level, 'mozilla/5.0 (compatible; attackbot/1.0)')"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _determine_attack_vector(self, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 658,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _determine_attack_vector(self, attack_type: str) -> str:"
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 659,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"determine attack vector\"\"\""
        },
        {
          "file": "gan_cyber_range/generators/web_attack_gan.py",
          "line": 669,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return vectors.get(attack_type, 'unknown')"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 472,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.optimizer.create_resource_pool(\"attack_generation\", \"process\", 2, 8)"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 479,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attacks_batch(self,"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 480,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_configs: list[dict],"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 482,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attacks in optimized batches\"\"\""
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 486,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cache_key = f\"attacks_batch_{hash(str(sorted(str(c) for c in attack_configs)))}\""
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 486,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "cache_key = f\"attacks_batch_{hash(str(sorted(str(c) for c in attack_configs)))}\""
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 489,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(\"returned cached attack generation results\")"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 493,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack(config):"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 494,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# simulate attack generation"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 497,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": str(uuid.uuid4()),"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 502,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "tasks = [(generate_attack, (config,), {}) for config in attack_configs]"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 502,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "tasks = [(generate_attack, (config,), {}) for config in attack_configs]"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 505,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "results = self.optimizer.optimize_batch_processing(tasks, \"attack_generation\")"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 511,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generated {len(results)} attacks using optimized batch processing\")"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 597,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack generation"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 598,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_configs = ["
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 605,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(\"testing optimized attack generation...\")"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 607,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = workload_manager.generate_attacks_batch(attack_configs)"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 607,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = workload_manager.generate_attacks_batch(attack_configs)"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 607,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attacks = workload_manager.generate_attacks_batch(attack_configs)"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 609,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"generated {len(attacks)} attacks in {generation_time:.2f}s\")"
        },
        {
          "file": "gan_cyber_range/optimization/adaptive_performance.py",
          "line": 609,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"generated {len(attacks)} attacks in {generation_time:.2f}s\")"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_generation = \"attack_generation\""
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 26,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_generation = \"attack_generation\""
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 123,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "pipelinetype.attack_generation: {"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 126,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": stagetype.data_validation, \"name\": \"validate attack patterns\"},"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": stagetype.feature_extraction, \"name\": \"extract attack features\"},"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 128,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": stagetype.model_training, \"name\": \"train attack gan\"},"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 129,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": stagetype.model_evaluation, \"name\": \"evaluate generated attacks\"},"
        },
        {
          "file": "gan_cyber_range/orchestration/pipeline_manager.py",
          "line": 130,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "{\"type\": stagetype.output_generation, \"name\": \"generate attack variants\"}"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..factories.attack_factory import attackfactory"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 14,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from ..factories.attack_factory import attackfactory"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 59,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns: list[dict[str, any]]"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory: attackfactory,"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_factory: attackfactory,"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attack_factory"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_factory = attack_factory"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_sophistication\": \"intermediate\""
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 132,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_sophistication\": \"advanced\""
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 146,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_sophistication\": \"advanced\""
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns=params.get(\"attack_patterns\", self._get_default_attack_patterns(scenario_type)),"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns=params.get(\"attack_patterns\", self._get_default_attack_patterns(scenario_type)),"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_patterns=params.get(\"attack_patterns\", self._get_default_attack_patterns(scenario_type)),"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 422,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"set up cyber range and attack vectors\","
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 539,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"execute multi-stage attack campaign\","
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"document attack methodology\","
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 567,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"complete attack documentation\","
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 574,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _get_default_attack_patterns(self, scenario_type: scenariotype) -> list[dict[str, any]]:"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 575,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"get default attack patterns for scenario type\"\"\""
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 593,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return patterns_map.get(scenario_type, [{\"type\": \"basic_attack\", \"sophistication\": \"low\", \"stealth\":"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 611,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_execution\": 40,"
        },
        {
          "file": "gan_cyber_range/orchestration/scenario_orchestrator.py",
          "line": 623,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# implementation would set up cyber range, deploy attacks, etc."
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 545,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "id=\"deploy_attacks\","
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 546,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "name=\"deploy attack scenarios\","
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 547,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"deploy synthetic attacks and red team scenarios\","
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 548,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "handler=self._deploy_attack_scenarios,"
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "parameters=components.get(\"attacks\", {})"
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 558,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "dependencies=[\"deploy_attacks\"],"
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 587,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "async def _deploy_attack_scenarios(self, context: dict[str, any]) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 588,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"deploy attack scenarios step handler\"\"\""
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 589,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# this would integrate with attackfactory"
        },
        {
          "file": "gan_cyber_range/orchestration/workflow_engine.py",
          "line": 590,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return {\"scenarios_deployed\": 3, \"attack_vectors\": [\"phishing\", \"lateral_movement\", \"exfiltration\"]}"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 2,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "llm-based red team adversary for adaptive attack scenario generation."
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "to generate realistic, adaptive attack scenarios and tactics."
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 33,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackobjective:"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 34,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"defines an attack objective for the red team\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 61,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack knowledge base"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 64,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.attack_history = []"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 68,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def generate_attack_plan("
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate a comprehensive attack plan for the target\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 75,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logger.info(f\"generating attack plan for target: {target_profile.get('name', 'unknown')}\")"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 80,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# generate attack phases"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_phases = self._generate_attack_phases(target_analysis, constraints)"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_phases = self._generate_attack_phases(target_analysis, constraints)"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# create attack plan"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_plan = {"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 89,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phases': attack_phases,"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'estimated_duration': self._estimate_duration(attack_phases),"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'success_probability': self._estimate_success_probability(target_analysis, attack_phases),"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 92,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'stealth_score': self._calculate_stealth_score(attack_phases),"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return attack_plan"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"adapt attack tactics based on blue team responses\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# update attack plan"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"low\": [\"basic_malware\", \"social_engineering\", \"public_exploits\"],"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 268,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"name\": \"exploit public-facing application\","
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"analyze target profile to identify attack vectors\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_surface': self._assess_attack_surface(target_profile),"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_surface': self._assess_attack_surface(target_profile),"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _assess_attack_surface(self, target_profile: dict[str, any]) -> dict[str, any]:"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 309,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"assess the attack surface of the target\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 370,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _generate_attack_phases(self, target_analysis: dict[str, any], constraints: optional[dict[str, a"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 371,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"generate attack phases based on target analysis\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 434,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check attack surface"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 435,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "surface = target_analysis.get('attack_surface', {})"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 438,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "techniques.append('t1190')  # exploit public-facing application"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 472,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"define final attack objectives\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 489,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _estimate_duration(self, attack_phases: list[dict[str, any]]) -> str:"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 490,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"estimate total attack duration\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 494,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_hours = sum(phase_durations.get(phase.get('duration', 'hours'), 1) for phase in attack_phases)"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 503,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _estimate_success_probability(self, target_analysis: dict[str, any], attack_phases: list[dict[st"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 504,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"estimate overall attack success probability\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 521,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# adjust based on attack complexity"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 522,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "complexity_modifier = max(0.5, 1.0 - (len(attack_phases) * 0.1))"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 527,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def _calculate_stealth_score(self, attack_phases: list[dict[str, any]]) -> float:"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 528,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"calculate overall stealth score of the attack plan\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 532,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "total_stealth = sum(stealth_levels.get(phase.get('stealth_level', 'medium'), 0.6) for phase in attac"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "average_stealth = total_stealth / len(attack_phases) if attack_phases else 0.6"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "average_stealth = total_stealth / len(attack_phases) if attack_phases else 0.6"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 603,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# exploit defensive gaps"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 617,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'t1190': ['t1566', 't1078'],  # if web exploit detected, try phishing or valid accounts"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 619,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'t1078': ['t1190', 't1021'],  # if valid accounts detected, try exploits or remote services"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 625,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"apply adaptations to the current attack plan\"\"\""
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 636,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# add new attack vectors"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 639,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'phase': 'adaptive_exploitation',"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 642,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'objectives': ['exploit_defensive_gaps'],"
        },
        {
          "file": "gan_cyber_range/red_team/llm_adversary.py",
          "line": 391,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "'objectives': ['establish_foothold', 'deploy_backdoor'],"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 832,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"comparative evaluation of gan-based attack generation methods\","
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 833,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "hypothesis=\"gan-based methods generate higher quality synthetic attacks than baselines\","
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 837,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'generation_speed': 100.0  # attacks per second"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 852,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_generator: callable,"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 861,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# register attack generator"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 862,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.framework.register_data_generator(\"attacks\", attack_generator)"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 862,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.framework.register_data_generator(\"attacks\", attack_generator)"
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 867,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"evaluation of defensive methods against synthetic attacks\","
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 868,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "hypothesis=\"advanced defense methods detect synthetic attacks more effectively\","
        },
        {
          "file": "gan_cyber_range/research/experiment_framework.py",
          "line": 882,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return self.framework.design_experiment(config, method_names, \"attacks\")"
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaling_framework.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_generator = \"attack_generator\""
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaling_framework.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_generator = \"attack_generator\""
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaling_framework.py",
          "line": 284,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if component_type == componenttype.attack_generator:"
        },
        {
          "file": "gan_cyber_range/scalability/auto_scaling_framework.py",
          "line": 286,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks_generated_per_sec': random.uniform(1, 10),"
        },
        {
          "file": "gan_cyber_range/security/defensive_security_monitor.py",
          "line": 143,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"description\": \"prohibit creation or distribution of offensive attack tools\","
        },
        {
          "file": "gan_cyber_range/security/defensive_security_monitor.py",
          "line": 411,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check for coordinated attacks (multiple users with similar patterns)"
        },
        {
          "file": "gan_cyber_range/security/security_orchestrator.py",
          "line": 548,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "high_risk_permissions = {'create_attack', 'modify_security', 'access_sensitive'}"
        },
        {
          "file": "gan_cyber_range/security/security_orchestrator.py",
          "line": 574,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'create_attack': 'attack_creation',"
        },
        {
          "file": "gan_cyber_range/security/security_orchestrator.py",
          "line": 574,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'create_attack': 'attack_creation',"
        },
        {
          "file": "gan_cyber_range/security/threat_detector.py",
          "line": 39,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'create_attack': 0.6,"
        },
        {
          "file": "gan_cyber_range/testing/comprehensive_test_framework.py",
          "line": 543,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"test input validation against common attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/training/__init__.py",
          "line": 6,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "ai-generated attack campaigns."
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 5,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "blue team skills in detecting and responding to ai-generated attack campaigns."
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 56,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector: str"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 115,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "skill_id=\"ai_attack_detection\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 116,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "name=\"ai-generated attack detection\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 117,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"identify patterns consistent with ai-generated attack campaigns\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"recognize statistical anomalies in attack patterns\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"identify high-entropy attack sequences\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 137,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "prerequisites=[\"ai_attack_detection\"],"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 139,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"examine statistical properties of attack data\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 152,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description=\"respond effectively to ai-powered attack campaigns\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 155,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "prerequisites=[\"ai_attack_detection\", \"gan_artifact_analysis\"],"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 157,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"develop counter-strategies for adaptive attacks\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 178,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector=\"malware\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 180,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_skills=[\"ai_attack_detection\", \"gan_artifact_analysis\"],"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 203,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_vector=\"apt\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 205,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "target_skills=[\"adaptive_response\", \"ai_attack_detection\"],"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 219,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"monitor for tactical shifts in attack patterns\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 237,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"ai_attack_detection\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 308,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if action_type == \"detect_attack\":"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 519,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "detection_actions = [a for a in session.actions_taken if a[\"action_type\"] == \"detect_attack\"]"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 761,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if action_type == \"detect_attack\":"
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 767,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"description\": \"attack techniques became more stealthy\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 777,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"description\": \"attack pivoted to alternative vector\","
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 778,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"impact\": \"new attack path opened\""
        },
        {
          "file": "gan_cyber_range/training/defensive_training_enhancer.py",
          "line": 803,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "action_type=\"detect_attack\","
        },
        {
          "file": "gan_cyber_range/utils/__init__.py",
          "line": 30,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "from .error_handling import cyberrangeerror, attackexecutionerror, networksimulationerror"
        },
        {
          "file": "gan_cyber_range/utils/__init__.py",
          "line": 33,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attackexecutionerror = exception"
        },
        {
          "file": "gan_cyber_range/utils/__init__.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attackexecutionerror\","
        },
        {
          "file": "gan_cyber_range/utils/caching.py",
          "line": 550,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack data cache - medium ttl"
        },
        {
          "file": "gan_cyber_range/utils/caching.py",
          "line": 552,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_data',"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 9,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "- attack containment and isolation"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 114,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_payload': 1000,"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 161,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_config(self, config: dict[str, any], client_id: str = 'unknown') -> dict[str, an"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 162,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate attack configuration for safety\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 183,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# validate attack parameters"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 230,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# network attack signatures"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 231,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.threat_signatures['network_attacks'] = ["
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 239,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# exploitation frameworks"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 240,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.threat_signatures['exploit_frameworks'] = ["
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 241,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "r'exploit/.*/',"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 334,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"attack containment and isolation system\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 594,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def before_attack_generation(self, func):"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 692,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'create_range', 'deploy_range', 'start_attack', 'stop_attack',"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 692,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'create_range', 'deploy_range', 'start_attack', 'stop_attack',"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 693,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'generate_attacks', 'evaluate_performance', 'create_scenario'"
        },
        {
          "file": "gan_cyber_range/utils/enhanced_security.py",
          "line": 705,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validation = input_validator.validate_attack_config(params, client_id)"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 33,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: optional[str] = none"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': self.context.attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 73,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': self.context.attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 81,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackexecutionerror(cyberrangeerror):"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 82,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"errors related to attack execution\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 84,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def __init__(self, message: str, attack_id: str, technique_id: optional[str] = none, **kwargs):"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 86,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "module=\"attack_engine\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "function=\"execute_attack\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 88,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id=attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "error_code=\"cr_attack_exec\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "user_message=\"attack execution failed - check attack configuration\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 96,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "user_message=\"attack execution failed - check attack configuration\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 125,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "module=\"attack_gan\","
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 347,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif isinstance(error, attackexecutionerror):"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 348,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attempt to retry attack with different parameters"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 349,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.logger.info(\"attempting attack retry for recovery\")"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 350,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# in a real implementation, this would modify attack parameters and retry"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 569,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def attack_retry_recovery(error: cyberrangeerror) -> bool:"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 570,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"recovery strategy for attack execution errors\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 571,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# placeholder - in real implementation would modify and retry attack"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 572,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "logging.getlogger(__name__).info(\"executing attack retry recovery\")"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "error_handler.register_recovery_strategy(\"cr_attack_exec\", attack_retry_recovery)"
        },
        {
          "file": "gan_cyber_range/utils/error_handling.py",
          "line": 577,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "error_handler.register_recovery_strategy(\"cr_attack_exec\", attack_retry_recovery)"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 21,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"structured log event for security and attack events\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 54,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if hasattr(record, 'attack_id'):"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "log_entry['attack_id'] = record.attack_id"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 55,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "log_entry['attack_id'] = record.attack_id"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def log_attack_event("
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: str,"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"log attack-related events with structured data\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'event_type': 'attack',"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_id': attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 284,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# attack events log"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_handler = logging.handlers.rotatingfilehandler("
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 286,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "log_path / \"attack_events.json\","
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 290,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_handler.setlevel(logging.info)"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 291,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_handler.setformatter(securityeventformatter())"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_logger = logging.getlogger('attacks')"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 293,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_logger = logging.getlogger('attacks')"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_logger.addhandler(attack_handler)"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 294,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_logger.addhandler(attack_handler)"
        },
        {
          "file": "gan_cyber_range/utils/logging_config.py",
          "line": 295,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_logger.propagate = false"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def record_attack_metric(self, attack_id: str, technique_id: str, success: bool, duration: float) ->"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 533,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def record_attack_metric(self, attack_id: str, technique_id: str, success: bool, duration: float) ->"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 534,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"record attack execution metrics\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 536,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 536,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 541,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.metrics_collector.increment_counter(\"attacks_total\", 1.0, labels)"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 542,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.metrics_collector.record_timer(\"attack_duration\", duration, labels)"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 545,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.metrics_collector.increment_counter(\"attacks_successful\", 1.0, labels)"
        },
        {
          "file": "gan_cyber_range/utils/monitoring.py",
          "line": 582,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attacks_total',"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 4,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "this module provides security scanning, ethical use enforcement, attack containment,"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 50,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "allowed_attack_types: list[str] = field(default_factory=lambda: [\"web\", \"network\", \"malware\"])"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 52,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "max_attack_severity: float = 8.0"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_config(self, attack_config: dict[str, any]) -> bool:"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 99,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_config(self, attack_config: dict[str, any]) -> bool:"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 100,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate attack configuration for security compliance\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check attack type is allowed"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_config.get('attack_type', '')"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_config.get('attack_type', '')"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type = attack_config.get('attack_type', '')"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type not in self.policy.allowed_attack_types:"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 104,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_type not in self.policy.allowed_attack_types:"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f\"attack type '{attack_type}' is not allowed\","
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 106,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f\"attack type '{attack_type}' is not allowed\","
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 107,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "validation_type=\"attack_type\""
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 111,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "technique_id = attack_config.get('technique_id', '')"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# check attack severity"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "severity = attack_config.get('severity', 0.0)"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 120,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if severity > self.policy.max_attack_severity:"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f\"attack severity {severity} exceeds maximum allowed {self.policy.max_attack_severity}\","
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 122,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "f\"attack severity {severity} exceeds maximum allowed {self.policy.max_attack_severity}\","
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 127,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload = attack_config.get('payload', {})"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 130,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack payload contains prohibited content\","
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 221,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate attack payload content\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 288,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"check if target ip is safe for attacks\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'exploit_kit': r'(metasploit|exploit|payload|shellcode|nopsled)',"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'exploit_kit': r'(metasploit|exploit|payload|shellcode|nopsled)',"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 408,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'execute_attack',"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 488,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"provides attack containment and isolation\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 847,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if operation_type == 'attack':"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 848,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.validator.validate_attack_config(operation)"
        },
        {
          "file": "gan_cyber_range/utils/security.py",
          "line": 343,
          "pattern": "backdoor|rootkit|malware.*deploy",
          "description": "Malicious software deployment",
          "context": "'malware_signature': r'(trojan|virus|worm|rootkit|keylogger|spyware)',"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 271,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "class attackconfigvalidator(validator):"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 272,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validator for attack configurations\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 279,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"setup validation rules for attack configuration\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 281,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# validate attack name"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 285,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack name is required\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 298,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "lambda x: x in ['reconnaissance', 'weaponization', 'delivery', 'exploitation',"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 300,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"invalid attack phase\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 344,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# validate attack types"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 346,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack_types',"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 350,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"invalid attack types\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 453,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_payload(self, payload: dict[str, any]) -> bool:"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 454,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate attack payload for security concerns\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 571,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "config_type: type of configuration ('topology', 'attack', 'gan', 'range')"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 579,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack': attackconfigvalidator(),"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 579,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "'attack': attackconfigvalidator(),"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 602,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if config_type == 'attack' and 'payload' in config:"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 603,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not security_validator.validate_attack_payload(config['payload']):"
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 605,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack payload failed security validation\","
        },
        {
          "file": "gan_cyber_range/utils/validation.py",
          "line": 624,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "sanitize input data to prevent injection attacks."
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 90,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_success_rate\": {\"critical\": 0.8, \"warning\": 0.5},"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 175,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def record_attack_detection(self,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 176,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_id: str,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 177,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "attack_type: str,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 181,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"record attack detection event\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description = f\"attack {attack_type} {'detected' if detected else 'missed'}\""
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 184,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "description = f\"attack {attack_type} {'detected' if detected else 'missed'}\""
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 187,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_id\": attack_id,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 188,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack_type,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 188,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": attack_type,"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 194,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self.record_event(\"attack_detection\", severity, \"ids\", description, data)"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 343,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "day_events = self.get_events(event_type=\"attack_detection\", since=last_day)"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 554,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_1\", \"malware\", true, 0.95, 2.5)"
        },
        {
          "file": "gan_cyber_range/utils/defensive_monitoring.py",
          "line": 554,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "monitor.record_attack_detection(\"attack_1\", \"malware\", true, 0.95, 2.5)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_vector(self, attack_data: dict) -> tuple[bool, list[str]]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 77,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_vector(self, attack_data: dict) -> tuple[bool, list[str]]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 78,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"validate attack vector for defensive training purposes\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 83,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "required_fields = [\"attack_type\", \"payload\", \"techniques\", \"severity\"]"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 85,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if field not in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 87,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif attack_data[field] is none:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"attack_type\" in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 91,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"attack_type\" in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_data[\"attack_type\"] not in valid_types:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 93,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if attack_data[\"attack_type\"] not in valid_types:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "errors.append(f\"invalid attack_type: {attack_data['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "errors.append(f\"invalid attack_type: {attack_data['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 94,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "errors.append(f\"invalid attack_type: {attack_data['attack_type']}\")"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"payload\" in attack_data and attack_data[\"payload\"]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 97,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"payload\" in attack_data and attack_data[\"payload\"]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 98,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "payload_errors = self._validate_payload_safety(attack_data[\"payload\"])"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 102,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"severity\" in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 103,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not isinstance(attack_data[\"severity\"], (int, float)):"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 105,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif not (0.0 <= attack_data[\"severity\"] <= 1.0):"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 109,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"techniques\" in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 110,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not isinstance(attack_data[\"techniques\"], list):"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 113,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "for technique in attack_data[\"techniques\"]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 118,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if \"stealth_level\" in attack_data:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 119,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "if not isinstance(attack_data[\"stealth_level\"], (int, float)):"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 121,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "elif not (0.0 <= attack_data[\"stealth_level\"] <= 1.0):"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 124,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "self._log_validation(\"attack_vector\", len(errors) == 0, errors)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 632,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_vector(attack_data: dict) -> tuple[bool, list[str]]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 632,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "def validate_attack_vector(attack_data: dict) -> tuple[bool, list[str]]:"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 633,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"\"\"global function for attack vector validation\"\"\""
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 634,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return _global_validator.validate_attack_vector(attack_data)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 634,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "return _global_validator.validate_attack_vector(attack_data)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 661,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "# test attack vector validation"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 662,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "test_attack = {"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 663,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "\"attack_type\": \"malware\","
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 670,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid, errors = validator.validate_attack_vector(test_attack)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 670,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "valid, errors = validator.validate_attack_vector(test_attack)"
        },
        {
          "file": "gan_cyber_range/utils/robust_validation.py",
          "line": 671,
          "pattern": "exploit|attack|payload.*execute",
          "description": "Potential exploitation",
          "context": "print(f\"attack vector validation: {valid}, errors: {errors}\")"
        }
      ],
      "defensive_score": 100,
      "summary": {
        "defensive_indicators": 11615,
        "potential_concerns": 3848,
        "defensive_ratio": 0.7511479014421523,
        "pass_threshold": 70,
        "passed": false
      }
    }
  },
  "overall_result": {
    "security_passed": false,
    "deployment_approved": false,
    "recommendation": "SECURITY ISSUES MUST BE RESOLVED"
  }
}