/*
   YARA Rules for Detecting GAN-Cyber-Range-v2 Components
   
   Purpose: Defensive detection of adversarial AI attack generation platforms
   Author: Defensive Security Team
   Date: 2025-08-16
   
   These rules detect components of the GAN-Cyber-Range-v2 attack generation platform
   for defensive purposes only.
*/

rule GAN_Cyber_Range_Core_Components {
    meta:
        description = "Detects core GAN Cyber Range v2 attack generation components"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "critical"
        category = "adversarial_ai"
        tlp = "amber"
        
    strings:
        // Core GAN components
        $gan_class1 = "class AttackGAN" ascii
        $gan_class2 = "class MalwareGAN" ascii
        $gan_class3 = "class Generator" ascii
        $gan_class4 = "class Discriminator" ascii
        
        // Attack generation methods
        $method1 = "generate_malware_samples" ascii
        $method2 = "generate_attack_plan" ascii
        $method3 = "adapt_tactics" ascii
        $method4 = "execute_campaign" ascii
        
        // Synthetic attack indicators
        $synthetic1 = "synthetic_attacks" ascii
        $synthetic2 = "SyntheticMalware" ascii
        $synthetic3 = "AttackVector" ascii
        $synthetic4 = "diversity_threshold" ascii
        
        // AI framework usage
        $torch1 = "torch.nn.LSTM" ascii
        $torch2 = "torch.randn" ascii
        $torch3 = "nn.Sequential" ascii
        
        // Evasion techniques
        $evasion1 = "filter_detectable" ascii
        $evasion2 = "stealth_level" ascii
        $evasion3 = "evasion_requirements" ascii
        $evasion4 = "anti_analysis" ascii
        
    condition:
        (2 of ($gan_class*) and 2 of ($method*)) or
        (3 of ($synthetic*) and 1 of ($torch*)) or
        (2 of ($evasion*) and 1 of ($method*))
}

rule GAN_Generated_Malware_Detection {
    meta:
        description = "Detects synthetic malware generated by GAN systems"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "high"
        category = "synthetic_malware"
        
    strings:
        // Malware generation metadata
        $meta1 = "generated_timestamp" ascii
        $meta2 = "generator_version" ascii
        $meta3 = "training_epoch" ascii
        $meta4 = "confidence_score" ascii
        
        // Synthetic malware signatures
        $sig1 = "MalwareSignature" ascii
        $sig2 = "signature_type" ascii
        $sig3 = "malware_family" ascii
        $sig4 = "evasion_difficulty" ascii
        
        // GAN-specific patterns
        $pattern1 = "byte_sequence" ascii
        $pattern2 = "metadata_vector" ascii
        $pattern3 = "diversity_score" ascii
        
        // Behavioral capabilities
        $cap1 = "capabilities" ascii
        $cap2 = "file_encryption" ascii
        $cap3 = "keylogging" ascii
        $cap4 = "remote_access" ascii
        
    condition:
        3 of ($meta*) or
        (2 of ($sig*) and 1 of ($pattern*)) or
        (2 of ($cap*) and 1 of ($meta*))
}

rule Red_Team_LLM_Components {
    meta:
        description = "Detects LLM-based red team adversary components"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "high"
        category = "ai_adversary"
        
    strings:
        // LLM red team classes
        $class1 = "class RedTeamLLM" ascii
        $class2 = "AdversaryProfile" ascii
        $class3 = "AttackObjective" ascii
        
        // Attack planning methods
        $plan1 = "generate_attack_plan" ascii
        $plan2 = "adapt_tactics" ascii
        $plan3 = "generate_social_engineering_campaign" ascii
        $plan4 = "simulate_threat_intelligence" ascii
        
        // Adversary capabilities
        $adv1 = "sophistication_level" ascii
        $adv2 = "risk_tolerance" ascii
        $adv3 = "creativity" ascii
        $adv4 = "stealth_preference" ascii
        
        // Social engineering components
        $se1 = "spear_phishing" ascii
        $se2 = "business_email_compromise" ascii
        $se3 = "susceptibility_score" ascii
        $se4 = "pretext" ascii
        
        // Adaptive behavior
        $adapt1 = "detection_analysis" ascii
        $adapt2 = "blue_team_response" ascii
        $adapt3 = "technique_substitutions" ascii
        $adapt4 = "defensive_gaps" ascii
        
    condition:
        (1 of ($class*) and 2 of ($plan*)) or
        (2 of ($adv*) and 2 of ($se*)) or
        (2 of ($adapt*) and 1 of ($plan*))
}

rule Attack_Engine_Detection {
    meta:
        description = "Detects attack execution engine components"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "high"
        category = "attack_automation"
        
    strings:
        // Attack engine classes
        $engine1 = "class AttackEngine" ascii
        $engine2 = "AttackStep" ascii
        $engine3 = "AttackCampaign" ascii
        $engine4 = "AttackResult" ascii
        
        // MITRE ATT&CK techniques
        $mitre1 = "T1078" ascii  // Valid Accounts
        $mitre2 = "T1190" ascii  // Exploit Public-Facing Application
        $mitre3 = "T1059" ascii  // Command and Scripting Interpreter
        $mitre4 = "T1021" ascii  // Remote Services
        $mitre5 = "T1110" ascii  // Brute Force
        $mitre6 = "T1046" ascii  // Network Service Scanning
        
        // Attack execution methods
        $exec1 = "execute_attack" ascii
        $exec2 = "execute_campaign" ascii
        $exec3 = "_execute_technique" ascii
        $exec4 = "success_probability" ascii
        
        // Kill chain phases
        $phase1 = "reconnaissance" ascii
        $phase2 = "weaponization" ascii
        $phase3 = "exploitation" ascii
        $phase4 = "lateral_movement" ascii
        
    condition:
        (2 of ($engine*) and 3 of ($mitre*)) or
        (2 of ($exec*) and 2 of ($phase*)) or
        (1 of ($engine*) and 2 of ($exec*) and 2 of ($mitre*))
}

rule GAN_Training_Infrastructure {
    meta:
        description = "Detects GAN training and model infrastructure"
        author = "Defensive Security Team" 
        date = "2025-08-16"
        severity = "medium"
        category = "ml_infrastructure"
        
    strings:
        // Training components
        $train1 = "train_discriminator" ascii
        $train2 = "train_generator" ascii
        $train3 = "training_history" ascii
        $train4 = "privacy_budget" ascii
        
        // Model optimization
        $opt1 = "g_optimizer" ascii
        $opt2 = "d_optimizer" ascii
        $opt3 = "Adam" ascii
        $opt4 = "BCELoss" ascii
        
        // Data processing
        $data1 = "AttackVectorizer" ascii
        $data2 = "vectorize" ascii
        $data3 = "inverse_transform" ascii
        $data4 = "embedding_dim" ascii
        
        // Model persistence
        $save1 = "save_model" ascii
        $save2 = "load_model" ascii
        $save3 = "checkpoint" ascii
        $save4 = "state_dict" ascii
        
    condition:
        (2 of ($train*) and 2 of ($opt*)) or
        (2 of ($data*) and 1 of ($save*)) or
        (3 of ($train*) or 3 of ($opt*))
}

rule Evasion_Techniques_Detection {
    meta:
        description = "Detects anti-analysis and evasion techniques"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "high"
        category = "evasion"
        
    strings:
        // Anti-analysis techniques
        $anti1 = "anti_analysis" ascii
        $anti2 = "sandbox_evasion" ascii
        $anti3 = "environment_checks" ascii
        $anti4 = "sleep_timer" ascii
        
        // Steganography and obfuscation
        $obf1 = "steganography" ascii
        $obf2 = "obfuscation" ascii
        $obf3 = "process_hollowing" ascii
        $obf4 = "reflective_dll_loading" ascii
        
        // Living off the land
        $lotl1 = "living_off_land" ascii
        $lotl2 = "legitimate_tools" ascii
        $lotl3 = "powershell" ascii
        $lotl4 = "fileless_execution" ascii
        
        // Evasion parameters
        $param1 = "evasion_technique" ascii
        $param2 = "creativity_score" ascii
        $param3 = "detection_difficulty" ascii
        $param4 = "stealth_requirement" ascii
        
    condition:
        (2 of ($anti*)) or
        (2 of ($obf*)) or  
        (2 of ($lotl*)) or
        (2 of ($param*) and (1 of ($anti*) or 1 of ($obf*)))
}

rule Threat_Intelligence_Spoofing {
    meta:
        description = "Detects threat intelligence generation and spoofing capabilities"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "medium"
        category = "threat_intel_manipulation"
        
    strings:
        // Threat intel generation
        $ti1 = "simulate_threat_intelligence" ascii
        $ti2 = "generate_apt_profile" ascii
        $ti3 = "generate_iocs" ascii
        $ti4 = "generate_campaign_history" ascii
        
        // APT simulation
        $apt1 = "apt1" ascii
        $apt2 = "lazarus" ascii
        $apt3 = "fin7" ascii
        $apt4 = "carbanak" ascii
        
        // IOC types
        $ioc1 = "file_hashes" ascii
        $ioc2 = "ip_addresses" ascii
        $ioc3 = "domains" ascii
        $ioc4 = "mutex_names" ascii
        $ioc5 = "registry_keys" ascii
        
        // Fake intelligence
        $fake1 = "confidence_level" ascii
        $fake2 = "attribution" ascii
        $fake3 = "campaign_name" ascii
        $fake4 = "malware_families" ascii
        
    condition:
        (2 of ($ti*) and 2 of ($ioc*)) or
        (1 of ($ti*) and 2 of ($apt*)) or
        (2 of ($fake*) and 1 of ($ti*))
}

/*
   Rule for detecting the overall GAN-Cyber-Range platform
   This is a comprehensive rule that looks for multiple components
*/
rule GAN_Cyber_Range_Platform_Complete {
    meta:
        description = "Comprehensive detection of GAN-Cyber-Range-v2 platform"
        author = "Defensive Security Team"
        date = "2025-08-16"
        severity = "critical"
        category = "adversarial_ai_platform"
        confidence = "high"
        
    strings:
        // Package imports
        $import1 = "from gan_cyber_range import" ascii
        $import2 = "import gan_cyber_range" ascii
        
        // Main classes
        $class1 = "AttackGAN" ascii
        $class2 = "RedTeamLLM" ascii
        $class3 = "CyberRange" ascii
        $class4 = "AttackEngine" ascii
        
        // Key methods
        $method1 = "generate" ascii
        $method2 = "train" ascii
        $method3 = "execute" ascii
        $method4 = "adapt" ascii
        
        // Configuration
        $config1 = "architecture" ascii
        $config2 = "attack_types" ascii
        $config3 = "noise_dim" ascii
        
        // Specific strings unique to this platform
        $unique1 = "gan-cyber-range-v2" ascii
        $unique2 = "Second-Generation Adversarial Cyber Range" ascii
        $unique3 = "GAN-based Attack Generation" ascii
        
    condition:
        (1 of ($import*) and 2 of ($class*)) or
        (2 of ($class*) and 2 of ($method*)) or
        (1 of ($unique*)) or
        (3 of ($class*) and 1 of ($config*))
}