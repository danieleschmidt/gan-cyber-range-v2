apiVersion: v1
kind: ConfigMap
metadata:
  name: cyber-range-config
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: gan-cyber-range-v2
    app.kubernetes.io/component: config
data:
  # Database Configuration
  DATABASE_HOST: "postgresql-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "gan_cyber_range"
  DATABASE_SCHEMA: "public"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # API Configuration
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  API_TIMEOUT: "300"
  
  # Security Configuration
  JWT_EXPIRATION_HOURS: "24"
  SESSION_TIMEOUT_MINUTES: "60"
  MAX_LOGIN_ATTEMPTS: "5"
  
  # Attack Generation Configuration
  GAN_MODEL_PATH: "/app/models/attack_gan"
  MAX_ATTACK_GENERATION: "1000"
  ATTACK_GENERATION_TIMEOUT: "600"
  
  # Cyber Range Configuration
  RANGE_NETWORK_CIDR: "10.100.0.0/16"
  MAX_CONCURRENT_RANGES: "10"
  RANGE_CLEANUP_INTERVAL: "300"
  CONTAINER_RUNTIME: "docker"
  
  # Monitoring Configuration
  METRICS_COLLECTION_INTERVAL: "30"
  LOG_LEVEL: "INFO"
  PROMETHEUS_PORT: "9090"
  GRAFANA_PORT: "3000"
  
  # Storage Configuration
  STORAGE_PATH: "/app/data"
  BACKUP_PATH: "/app/backups"
  MODEL_CACHE_SIZE: "1024"
  
  # Training Configuration
  MAX_TRAINING_SESSIONS: "50"
  TRAINING_DATA_RETENTION: "90"
  
  # Red Team Configuration
  LLM_MODEL_PATH: "/app/models/llm"
  CAMPAIGN_GENERATION_TIMEOUT: "300"
  
  # Network Security
  ALLOWED_ORIGINS: "http://localhost:3000,https://cyber-range.terragon.com"
  CORS_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "3600"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: gan-cyber-range-v2
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

        # Upstream servers
        upstream api_backend {
            least_conn;
            server api-service:8000 max_fails=3 fail_timeout=30s;
        }

        upstream websocket_backend {
            ip_hash;
            server api-service:8000;
        }

        # Main server block
        server {
            listen 80;
            server_name _;

            # API endpoints
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://api_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            # Authentication endpoints
            location /auth/ {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://api_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # WebSocket endpoints
            location /ws {
                proxy_pass http://websocket_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }

            # Health check
            location /health {
                proxy_pass http://api_backend;
                access_log off;
            }

            # Documentation
            location /docs {
                proxy_pass http://api_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }

            # Static files (if any)
            location /static/ {
                alias /usr/share/nginx/html/static/;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Default redirect to docs
            location = / {
                return 301 /docs;
            }

            # Security.txt
            location /.well-known/security.txt {
                return 200 "Contact: security@terragon.com\nExpires: 2024-12-31T23:59:59.000Z\n";
                add_header Content-Type text/plain;
            }
        }
    }