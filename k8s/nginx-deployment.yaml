apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: nginx
  loadBalancerSourceRanges:
    - 0.0.0.0/0  # Configure based on your security requirements

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
    app.kubernetes.io/version: "1.25"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/component: proxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: nginx
          image: nginx:1.25-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: tls-certs
              mountPath: /etc/nginx/certs
              readOnly: true
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-logs
              mountPath: /var/log/nginx
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
                - CHOWN
                - SETGID
                - SETUID
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
        
        # Nginx Prometheus Exporter
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:0.10.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9113
              name: metrics
              protocol: TCP
          args:
            - -nginx.scrape-uri=http://localhost:80/nginx_status
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9113
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9113
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
      
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: tls-certs
          secret:
            secretName: tls-certificates
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: nginx-logs
          emptyDir: {}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cyber-range-ingress
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: gan-cyber-range-ingress
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - api.cyber-range.terragon.com
        - cyber-range.terragon.com
      secretName: cyber-range-tls
  rules:
    - host: api.cyber-range.terragon.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80
    - host: cyber-range.terragon.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-network-policy
  namespace: gan-cyber-range
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: nginx
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from: []  # Allow from anywhere (internet)
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9113
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: gan-cyber-range-api
      ports:
        - protocol: TCP
          port: 8000
    - to: []  # DNS resolution
      ports:
        - protocol: UDP
          port: 53