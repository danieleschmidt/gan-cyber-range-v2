version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: gan-cyber-range-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: gan_cyber_range
      POSTGRES_USER: cyber_range_user
      POSTGRES_PASSWORD: SecureDBPassword123!
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cyber_range_user -d gan_cyber_range"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cyber-range-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gan-cyber-range-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: SecureRedisPassword123!
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cyber-range-network

  # GAN Cyber Range API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    image: terragon/gan-cyber-range-v2:latest
    container_name: gan-cyber-range-api
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://cyber_range_user:SecureDBPassword123!@postgresql:5432/gan_cyber_range
      
      # Redis configuration
      REDIS_URL: redis://:SecureRedisPassword123!@redis:6379/0
      
      # JWT configuration
      JWT_SECRET: super-secret-jwt-key-change-in-production-2024
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_HOURS: 24
      
      # API configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: 4
      
      # Application configuration
      LOG_LEVEL: INFO
      DEBUG: false
      
      # Paths
      GAN_MODEL_PATH: /app/models/attack_gan
      LLM_MODEL_PATH: /app/models/llm
      STORAGE_PATH: /app/data
      
      # Feature flags
      MAX_ATTACK_GENERATION: 1000
      MAX_CONCURRENT_RANGES: 10
      ATTACK_GENERATION_TIMEOUT: 600
      
      # External API keys (set these in production)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN:-your-huggingface-token}
      
      # Container runtime
      CONTAINER_RUNTIME: docker
      
      # Security
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      CORS_ENABLED: true
      RATE_LIMIT_REQUESTS: 1000
      RATE_LIMIT_WINDOW: 3600
    volumes:
      - api_data:/app/data
      - api_models:/app/models
      - api_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker container management
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics endpoint
    healthcheck:
      test: ["CMD", "/healthcheck.sh", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cyber-range-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    image: terragon/gan-cyber-range-v2:latest
    container_name: gan-cyber-range-worker
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      APP_MODE: worker
      DATABASE_URL: postgresql://cyber_range_user:SecureDBPassword123!@postgresql:5432/gan_cyber_range
      REDIS_URL: redis://:SecureRedisPassword123!@redis:6379/0
      LOG_LEVEL: INFO
    volumes:
      - api_data:/app/data
      - api_models:/app/models
      - api_logs:/app/logs
    networks:
      - cyber-range-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: gan-cyber-range-nginx
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - ./certs:/etc/nginx/certs:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cyber-range-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: gan-cyber-range-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"  # Avoid conflict with API metrics port
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cyber-range-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:9.3.0
    container_name: gan-cyber-range-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: GrafanaAdmin123!
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./docker/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./docker/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - cyber-range-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

# Networks
networks:
  cyber-range-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  api_models:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local